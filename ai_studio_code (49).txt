--==============================================================================
-- SERVICES
--==============================================================================
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

--==============================================================================
-- REMOTE EVENT REFERENCES
--==============================================================================
local RemotesFolder = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("game")
local Mouse1Remote = RemotesFolder:WaitForChild("action"):WaitForChild("mouse1")
local DeployRemote = RemotesFolder:WaitForChild("deploy")

--==============================================================================
-- CONFIGURATION & STATE VARIABLES
--==============================================================================
local mainSafeSpotCFrame = CFrame.new(-522, -109, 2)
local originalMainPosition = nil -- Will store the Main's CFrame before teleporting
local playerRole = "None" -- Will be "Main" or "Alt"

local config = {
    Colors = {
        GradientColor1 = Color3.fromRGB(50, 54, 58),
        GradientColor2 = Color3.fromRGB(20, 22, 24),
        GradientColor3 = Color3.fromRGB(35, 38, 41),
        
        Button = Color3.fromRGB(35, 38, 41),
        Text = Color3.fromRGB(230, 230, 230),
        Glow = Color3.fromRGB(255, 255, 255),
        SubtleText = Color3.fromRGB(180, 180, 180),
        ToggleOn = Color3.fromRGB(255, 255, 255),
    },
    AnimationSpeeds = {
        Intro = 0.8,
        Outro = 0.8,
        Transform = 0.6,
        ButtonHover = 0.2,
        ButtonClick = 0.1,
        GradientPan = 10,
        Toggle = 0.2,
		InfoWindowLine = 0.4,
		InfoWindowExpand = 0.5
    }
}

--==============================================================================
-- GUI CREATION - Main Frame
--==============================================================================
local player = Players.LocalPlayer

local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.fromScale(0, 0)
mainFrame.Position = UDim2.fromScale(0.5, 0.5)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = config.Colors.GradientColor2
mainFrame.BorderSizePixel = 0
mainFrame.Draggable = true
mainFrame.Active = true
mainFrame.Visible = false
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, config.Colors.GradientColor1),
    ColorSequenceKeypoint.new(0.5, config.Colors.GradientColor2),
    ColorSequenceKeypoint.new(1, config.Colors.GradientColor3)
})
uiGradient.Rotation = 45
uiGradient.Parent = mainFrame

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 8)
uiCorner.Parent = mainFrame

--==============================================================================
-- GUI CREATION - Initial Selection UI
--==============================================================================
local playerInfoFrame = Instance.new("Frame")
playerInfoFrame.Name = "PlayerInfoFrame"
playerInfoFrame.Size = UDim2.new(0.8, 0, 0, 50)
playerInfoFrame.Position = UDim2.new(0.5, 0, 0.2, 0)
playerInfoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
playerInfoFrame.BackgroundTransparency = 1
playerInfoFrame.Parent = mainFrame

local pfpImage = Instance.new("ImageLabel")
pfpImage.Name = "PFPImage"
pfpImage.Size = UDim2.fromOffset(50, 50)
pfpImage.Position = UDim2.fromScale(0, 0.5)
pfpImage.AnchorPoint = Vector2.new(0, 0.5)
pfpImage.BackgroundTransparency = 1
pfpImage.ImageTransparency = 1
pfpImage.Parent = playerInfoFrame

local pfpCorner = Instance.new("UICorner")
pfpCorner.Parent = pfpImage
pfpCorner.CornerRadius = UDim.new(0.5, 0)

local nameLabel = Instance.new("TextLabel")
nameLabel.Name = "NameLabel"
nameLabel.Size = UDim2.new(1, -60, 1, 0)
nameLabel.Position = UDim2.new(0, 60, 0.5, 0)
nameLabel.AnchorPoint = Vector2.new(0, 0.5)
nameLabel.BackgroundTransparency = 1
nameLabel.TextColor3 = config.Colors.Text
nameLabel.Font = Enum.Font.SourceSans
nameLabel.Text = "using " .. player.DisplayName .. " as?"
nameLabel.TextSize = 20
nameLabel.TextXAlignment = Enum.TextXAlignment.Left
nameLabel.TextTransparency = 1
nameLabel.Parent = playerInfoFrame

local pfpUrl
local success, content, isReady = pcall(Players.GetUserThumbnailAsync, Players, player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size100x100)
if success and isReady then
    pfpUrl = content
    pfpImage.Image = pfpUrl
else
    warn("Could not fetch player thumbnail.")
end

local function createStyledButton(text, parent)
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(0.4, 0, 0.2, 0)
    button.BackgroundColor3 = config.Colors.Button
    button.TextColor3 = config.Colors.Text
    button.Font = Enum.Font.SourceSans
    button.Text = text
    button.TextSize = 18
    button.TextTransparency = 1
    button.BackgroundTransparency = 1
    button.Parent = parent

    local btnCorner = Instance.new("UICorner")
    btnCorner.Parent = button
    btnCorner.CornerRadius = UDim.new(0, 6)

    local btnStroke = Instance.new("UIStroke")
    btnStroke.Parent = button
    btnStroke.Color = config.Colors.Glow
    btnStroke.Thickness = 0
    btnStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

    return button, btnStroke
end

local mainButton, mainStroke = createStyledButton("Main", mainFrame)
mainButton.Position = UDim2.new(0.28, 0, 0.5, 0)
mainButton.AnchorPoint = Vector2.new(0.5, 0.5)

local altButton, altStroke = createStyledButton("Alt", mainFrame)
altButton.Position = UDim2.new(0.72, 0, 0.5, 0)
altButton.AnchorPoint = Vector2.new(0.5, 0.5)

local function createDescriptionLabel(text, parent)
    local descLabel = Instance.new("TextLabel")
    descLabel.Size = UDim2.new(0.4, 0, 0.4, 0)
    descLabel.BackgroundTransparency = 1
    descLabel.TextColor3 = config.Colors.SubtleText
    descLabel.Font = Enum.Font.SourceSansSemibold
    descLabel.Text = text
    descLabel.TextSize = 13
    descLabel.TextWrapped = true
    descLabel.TextXAlignment = Enum.TextXAlignment.Center
    descLabel.TextYAlignment = Enum.TextYAlignment.Top
    descLabel.TextTransparency = 1
    descLabel.Parent = parent
    return descLabel
end

local mainDescription = createDescriptionLabel("the one that gets the money and levels", mainFrame)
mainDescription.Name = "MainDescription"
mainDescription.Position = UDim2.new(0.28, 0, 0.65, 0)
mainDescription.AnchorPoint = Vector2.new(0.5, 0)

local altDescription = createDescriptionLabel("the one that gets farmed (can use more than one)", mainFrame)
altDescription.Name = "AltDescription"
altDescription.Position = UDim2.new(0.72, 0, 0.65, 0)
altDescription.AnchorPoint = Vector2.new(0.5, 0)

local selectionUI = {playerInfoFrame, mainButton, altButton, mainDescription, altDescription}

--==============================================================================
-- GUI CREATION - Settings Menu UI
--==============================================================================
local settingsHeader = Instance.new("Frame")
settingsHeader.Name = "SettingsHeader"
settingsHeader.Size = UDim2.new(1, -20, 0, 50)
settingsHeader.Position = UDim2.new(0.5, 0, 0.1, 0)
settingsHeader.AnchorPoint = Vector2.new(0.5, 0.5)
settingsHeader.BackgroundTransparency = 1
settingsHeader.Visible = false
settingsHeader.Parent = mainFrame
settingsHeader.ZIndex = 2

local settingsPFP = Instance.new("ImageLabel")
settingsPFP.Name = "SettingsPFP"
settingsPFP.Size = UDim2.fromOffset(40, 40)
settingsPFP.Position = UDim2.fromScale(0, 0.5)
settingsPFP.AnchorPoint = Vector2.new(0, 0.5)
settingsPFP.BackgroundTransparency = 1
settingsPFP.Image = pfpUrl
settingsPFP.ImageTransparency = 1
settingsPFP.Parent = settingsHeader

local settingsPFPCorner = Instance.new("UICorner")
settingsPFPCorner.Parent = settingsPFP
settingsPFPCorner.CornerRadius = UDim.new(0.5, 0)

local settingsTitle = Instance.new("TextLabel")
settingsTitle.Name = "SettingsTitle"
settingsTitle.Position = UDim2.new(0, 50, 0.5, 0)
settingsTitle.AnchorPoint = Vector2.new(0, 0.5)
settingsTitle.BackgroundTransparency = 1
settingsTitle.Font = Enum.Font.SourceSansBold
settingsTitle.TextColor3 = config.Colors.Text
settingsTitle.Text = player.DisplayName .. "'s settings"
settingsTitle.TextSize = 20
settingsTitle.TextXAlignment = Enum.TextXAlignment.Left
settingsTitle.TextTransparency = 1
settingsTitle.Parent = settingsHeader
settingsTitle.Size = UDim2.new(1, -50, 1, 0)

local function createToggleSwitch(labelText, position, parent, onToggle)
    local isOn = false
    local container = Instance.new("Frame")
    container.Size = UDim2.new(0.9, 0, 0, 30)
    container.Position = position
    container.AnchorPoint = Vector2.new(0.5, 0.5)
    container.BackgroundTransparency = 1
    container.Visible = false
    container.Parent = parent
	container.ZIndex = 2

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.fromScale(0, 0.5)
    label.AnchorPoint = Vector2.new(0, 0.5)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSans
    label.TextColor3 = config.Colors.Text
    label.Text = labelText
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextTransparency = 1
    label.Parent = container

    local track = Instance.new("TextButton")
    track.Size = UDim2.fromOffset(40, 20)
    track.Position = UDim2.fromScale(1, 0.5)
    track.AnchorPoint = Vector2.new(1, 0.5)
    track.BackgroundColor3 = config.Colors.Button
    track.BackgroundTransparency = 1
    track.Text = ""
    track.Parent = container
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.Parent = track
    trackCorner.CornerRadius = UDim.new(0.5, 0)
    
    local knob = Instance.new("Frame")
    knob.Size = UDim2.fromOffset(16, 16)
    knob.AnchorPoint = Vector2.new(0, 0.5)
    knob.Position = UDim2.new(0, 2, 0.5, 0)
    knob.BackgroundColor3 = config.Colors.SubtleText
    knob.BackgroundTransparency = 1
    knob.BorderSizePixel = 0
    knob.Parent = track
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.Parent = knob
    knobCorner.CornerRadius = UDim.new(0.5, 0)

    track.MouseButton1Click:Connect(function()
        isOn = not isOn
		
		if onToggle then
			onToggle(isOn)
		end
		
        local knobPos = isOn and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
        local knobAnchor = isOn and Vector2.new(1, 0.5) or Vector2.new(0, 0.5)
        local trackColor = isOn and config.Colors.ToggleOn or config.Colors.Button
        
        TweenService:Create(knob, TweenInfo.new(config.AnimationSpeeds.Toggle), {Position = knobPos, AnchorPoint = knobAnchor}):Play()
        TweenService:Create(track, TweenInfo.new(config.AnimationSpeeds.Toggle), {BackgroundColor3 = trackColor}):Play()
        
        print(labelText .. (isOn and " Enabled" or " Disabled"))
    end)
    
    return container
end

local infoFrame = Instance.new("Frame")
infoFrame.Name = "InfoFrame"
infoFrame.AnchorPoint = Vector2.new(0.5, 0.5) 
infoFrame.Position = UDim2.new(-0.25, -4, 0.5, 0) 
infoFrame.Size = UDim2.fromOffset(0, 1) 
infoFrame.BackgroundColor3 = config.Colors.GradientColor2
infoFrame.BackgroundTransparency = 0.1
infoFrame.BorderSizePixel = 0
infoFrame.Visible = false
infoFrame.ZIndex = 3
infoFrame.Parent = mainFrame

local infoCorner = Instance.new("UICorner")
infoCorner.Parent = infoFrame
infoCorner.CornerRadius = UDim.new(0, 8)
local infoGradient = uiGradient:Clone()
infoGradient.Parent = infoFrame

local isInfoPanelVisible = false
local isAnimatingInfoPanel = false
local showInfoButton = Instance.new("TextButton")
showInfoButton.Name = "ShowInfoButton"
showInfoButton.Size = UDim2.new(0.4, 0, 0, 30)
showInfoButton.Position = UDim2.new(0.05, 0, 0.95, 0)
showInfoButton.AnchorPoint = Vector2.new(0, 1)
showInfoButton.BackgroundColor3 = config.Colors.Button
showInfoButton.TextColor3 = config.Colors.Text
showInfoButton.Font = Enum.Font.SourceSans
showInfoButton.Text = "show info"
showInfoButton.TextSize = 14
showInfoButton.Visible = false
showInfoButton.Parent = mainFrame
showInfoButton.ZIndex = 2
local showInfoCorner = Instance.new("UICorner")
showInfoCorner.Parent = showInfoButton
showInfoCorner.CornerRadius = UDim.new(0, 6)

local showInfoStroke = Instance.new("UIStroke")
showInfoStroke.Parent = showInfoButton
showInfoStroke.Color = config.Colors.Glow
showInfoStroke.Thickness = 0
showInfoStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

local isAutoHitting = false
local function handleAutoHit(isOn)
	isAutoHitting = isOn
	if isAutoHitting then
		task.spawn(function()
			while isAutoHitting do
				local args = {
					true,
					1757070337.615337
				}
				Mouse1Remote:FireServer(unpack(args))
				task.wait(0.1)
			end
		end)
	end
end

local isAutoFarmEnabled = false
local function handleAutoFarm(isOn)
	isAutoFarmEnabled = isOn

	if isOn then
		-- If the switch is turned ON:
		-- Deploy first for both roles
		DeployRemote:InvokeServer()
		
		if playerRole == "Main" then
			-- Then, if it's the Main, proceed with positioning
			local character = player.Character
			if not character then return end
			local rootPart = character:FindFirstChild("HumanoidRootPart")
			if not rootPart then return end

			print("Saving original position.")
			originalMainPosition = rootPart.CFrame
			
			print("Moving to safe spot and anchoring.")
			character:SetPrimaryPartCFrame(mainSafeSpotCFrame)
			rootPart.Anchored = true
		end
	else
		-- If the switch is turned OFF:
		if playerRole == "Main" then
			local character = player.Character
			if not character then return end
			local rootPart = character:FindFirstChild("HumanoidRootPart")
			if not rootPart then return end

			rootPart.Anchored = false
			if originalMainPosition then
				print("Returning to original position.")
				character:SetPrimaryPartCFrame(originalMainPosition)
				originalMainPosition = nil
			end
		end
	end
end

local toggle1 = createToggleSwitch("Auto Hit", UDim2.fromScale(0.5, 0.35), mainFrame, handleAutoHit)
local toggle2 = createToggleSwitch("Auto Farm", UDim2.fromScale(0.5, 0.48), mainFrame, handleAutoFarm)
local settingsMenuControls = {toggle1, toggle2}

player.CharacterAdded:Connect(function(character)
	if playerRole == "Alt" and isAutoFarmEnabled then
		print("Alt has respawned. Re-deploying.")
		DeployRemote:InvokeServer()
	end
end)


--==============================================================================
-- ANIMATIONS
--==============================================================================

local function playIntro()
    mainFrame.Visible = true
    
    local introTweenInfo = TweenInfo.new(config.AnimationSpeeds.Intro, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local frameAppear = TweenService:Create(mainFrame, introTweenInfo, {
        Size = UDim2.fromScale(0.35, 0.4),
        BackgroundTransparency = 0.1
    })
    frameAppear:Play()
    frameAppear.Completed:Wait()

    local fadeInfo = TweenInfo.new(config.AnimationSpeeds.Intro / 2, Enum.EasingStyle.Linear)
    
    TweenService:Create(pfpImage, fadeInfo, {ImageTransparency = 0}):Play()
    TweenService:Create(nameLabel, fadeInfo, {TextTransparency = 0}):Play()
    wait(0.2)
    
    TweenService:Create(mainButton, fadeInfo, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    TweenService:Create(altButton, fadeInfo, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    wait(0.2)
    
    TweenService:Create(mainDescription, fadeInfo, {TextTransparency = 0}):Play()
    TweenService:Create(altDescription, fadeInfo, {TextTransparency = 0}):Play()
end

local function playOutro()
    local outroTweenInfo = TweenInfo.new(config.AnimationSpeeds.Outro, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
    
    TweenService:Create(playerInfoFrame, outroTweenInfo, {BackgroundTransparency = 1}):Play()
    TweenService:Create(pfpImage, outroTweenInfo, {ImageTransparency = 1}):Play()
    TweenService:Create(nameLabel, outroTweenInfo, {TextTransparency = 1}):Play()
    TweenService:Create(mainButton, outroTweenInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
    TweenService:Create(altButton, outroTweenInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
    TweenService:Create(mainDescription, outroTweenInfo, {TextTransparency = 1}):Play()
    TweenService:Create(altDescription, outroTweenInfo, {TextTransparency = 1}):Play()
    
    wait(config.AnimationSpeeds.Outro / 2)
    
    local frameDisappear = TweenService:Create(mainFrame, outroTweenInfo, {
        Size = UDim2.fromScale(0, 0),
        BackgroundTransparency = 1
    })
    frameDisappear:Play()
    frameDisappear.Completed:Wait()
    
    screenGui:Destroy()
end

local function transformToSettings()
    local fadeOutInfo = TweenInfo.new(config.AnimationSpeeds.Transform / 2)
    local transformInfo = TweenInfo.new(config.AnimationSpeeds.Transform, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    
    TweenService:Create(playerInfoFrame, fadeOutInfo, {BackgroundTransparency = 1}):Play()
    TweenService:Create(pfpImage, fadeOutInfo, {ImageTransparency = 1}):Play()
    TweenService:Create(nameLabel, fadeOutInfo, {TextTransparency = 1}):Play()
    TweenService:Create(mainButton, fadeOutInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
    TweenService:Create(altButton, fadeOutInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
    TweenService:Create(mainDescription, fadeOutInfo, {TextTransparency = 1}):Play()
    TweenService:Create(altDescription, fadeOutInfo, {TextTransparency = 1}):Play()
    wait(fadeOutInfo.Time)
    
    for _, element in ipairs(selectionUI) do
        element:Destroy()
    end
    
    mainFrame.ClipsDescendants = false
    local newSize = UDim2.fromScale(0.25, 0.5)
    local transformTween = TweenService:Create(mainFrame, transformInfo, {Size = newSize})
    transformTween:Play()
    transformTween.Completed:Wait()
    
    local fadeInInfo = TweenInfo.new(config.AnimationSpeeds.Transform / 2)
    
    settingsHeader.Visible = true
    TweenService:Create(settingsPFP, fadeInInfo, {ImageTransparency = 0}):Play()
    TweenService:Create(settingsTitle, fadeInInfo, {TextTransparency = 0}):Play()
    
    for _, control in ipairs(settingsMenuControls) do
        wait(0.1)
        control.Visible = true
        for _, child in ipairs(control:GetDescendants()) do
            if child:IsA("TextLabel") then
                TweenService:Create(child, fadeInInfo, {TextTransparency = 0}):Play()
            elseif child:IsA("Frame") or child:IsA("TextButton") then
                TweenService:Create(child, fadeInInfo, {BackgroundTransparency = 0}):Play()
            end
        end
    end

    showInfoButton.Visible = true
    TweenService:Create(showInfoButton, fadeInInfo, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
end

function toggleInfoWindow()
    if isAnimatingInfoPanel then return end
    isAnimatingInfoPanel = true
    
    isInfoPanelVisible = not isInfoPanelVisible
    
    local lineTweenInfo = TweenInfo.new(config.AnimationSpeeds.InfoWindowLine, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local expandTweenInfo = TweenInfo.new(config.AnimationSpeeds.InfoWindowExpand, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

    local finalWidth = mainFrame.AbsoluteSize.X * 0.5
    local finalHeight = mainFrame.AbsoluteSize.Y

    if isInfoPanelVisible then
        infoFrame.Visible = true
        
        local lineSize = UDim2.fromOffset(finalWidth, 1)
        local formLine = TweenService:Create(infoFrame, lineTweenInfo, {Size = lineSize})
        formLine:Play()
        formLine.Completed:Wait()

        local panelSize = UDim2.fromOffset(finalWidth, finalHeight)
        local expandPanel = TweenService:Create(infoFrame, expandTweenInfo, {Size = panelSize})
        expandPanel:Play()
		expandPanel.Completed:Connect(function()
			isAnimatingInfoPanel = false
		end)

    else
        local lineSize = UDim2.fromOffset(infoFrame.AbsoluteSize.X, 1)
        local shrinkToLine = TweenService:Create(infoFrame, expandTweenInfo, {Size = lineSize})
        shrinkToLine:Play()
        shrinkToLine.Completed:Wait()
		
        local dotSize = UDim2.fromOffset(0, 1)
        local shrinkToDot = TweenService:Create(infoFrame, lineTweenInfo, {Size = dotSize})
        shrinkToDot:Play()
        
        shrinkToDot.Completed:Connect(function()
            infoFrame.Visible = false
			isAnimatingInfoPanel = false
        end)
    end
end

local function setupButtonEvents(button, stroke, onClickFunction)
    local originalSize = button.Size
    local hoverSize = UDim2.new(originalSize.X.Scale * 1.1, originalSize.X.Offset * 1.1, originalSize.Y.Scale * 1.1, originalSize.Y.Offset * 1.1)
    
    local hoverTweenInfo = TweenInfo.new(config.AnimationSpeeds.ButtonHover, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local clickTweenInfo = TweenInfo.new(config.AnimationSpeeds.ButtonClick, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

	local hoverStartTime = 0

    button.MouseEnter:Connect(function()
		hoverStartTime = tick()
        TweenService:Create(button, hoverTweenInfo, {Size = hoverSize}):Play()
        TweenService:Create(stroke, hoverTweenInfo, {Thickness = 1.5}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, hoverTweenInfo, {Size = originalSize}):Play()
        TweenService:Create(stroke, hoverTweenInfo, {Thickness = 0}):Play()
    end)
    
    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, clickTweenInfo, {Size = originalSize}):Play()
    end)
    
    button.MouseButton1Click:Connect(function()
		local timeSinceHover = tick() - hoverStartTime
		local hoverDuration = config.AnimationSpeeds.ButtonHover
		if timeSinceHover < hoverDuration then
			task.wait(hoverDuration - timeSinceHover)
		end
		
        if onClickFunction then
            onClickFunction()
        end
    end)
end

local function animateGradient()
    local tweenInfo = TweenInfo.new(config.AnimationSpeeds.GradientPan, Enum.EasingStyle.Linear)
    local forwardTween = TweenService:Create(uiGradient, tweenInfo, {Offset = Vector2.new(1, 0)})
    local backwardTween = TweenService:Create(uiGradient, tweenInfo, {Offset = Vector2.new(-1, 0)})
    
    forwardTween.Completed:Connect(function()
        if screenGui and screenGui.Parent then
            backwardTween:Play()
        end
    end)
    backwardTween.Completed:Connect(function()
        if screenGui and screenGui.Parent then
            forwardTween:Play()
        end
    end)
    
    forwardTween:Play()
end

setupButtonEvents(mainButton, mainStroke, function()
	print("Main role selected")
	playerRole = "Main"
	mainButton.AutoButtonColor = false
	altButton.AutoButtonColor = false
	transformToSettings()
end)

setupButtonEvents(altButton, altStroke, function()
	print("Alt role selected")
	playerRole = "Alt"
	mainButton.AutoButtonColor = false
	altButton.AutoButtonColor = false
	playOutro()
end)

setupButtonEvents(showInfoButton, showInfoStroke, toggleInfoWindow)


--==============================================================================
-- SCRIPT EXECUTION
--==============================================================================
wait(1)
playIntro()
animateGradient()