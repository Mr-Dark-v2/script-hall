-- Services
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

-- Variables
local Player = Players.LocalPlayer
local hitboxActive = true -- Hitbox is on by default
local wallCheckActive = true -- Wall check is on by default
local defaultSize = 20 -- Default hitbox size
local defaultTransparency = 100 -- Default transparency (0 to 100, fully transparent)

-- Ensure Player exists
if not Player then
    error("LocalPlayer not found. Script must run on the client.")
end

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.Name = "HitboxExpanderGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 100, 0, 160) -- Reduced from 120x200 to 100x160
MainFrame.Position = UDim2.new(0.5, -50, 0.5, -80) -- Centered for new size
MainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MainFrame.BackgroundTransparency = 0.7
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 10)
MainCorner.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(0, 100, 0, 20) -- Width matches new frame
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Hitbox Expander"
Title.TextColor3 = Color3.fromRGB(200, 0, 200)
Title.Font = Enum.Font.GothamBlack
Title.TextSize = 14
Title.Parent = MainFrame

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 80, 0, 30) -- Reduced from 100x40
ToggleButton.Position = UDim2.new(0, 10, 0, 25) -- Centered in 100 width
ToggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ToggleButton.BackgroundTransparency = 0.3
ToggleButton.Text = "ðŸ”’ Hitbox: ON"
ToggleButton.TextColor3 = Color3.fromRGB(50, 255, 50)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 12
ToggleButton.Parent = MainFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.CornerRadius = UDim.new(0, 8)
ToggleCorner.Parent = ToggleButton

local WallCheckButton = Instance.new("TextButton")
WallCheckButton.Size = UDim2.new(0, 80, 0, 30) -- Reduced from 100x40
WallCheckButton.Position = UDim2.new(0, 10, 0, 60) -- Adjusted vertically
WallCheckButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
WallCheckButton.BackgroundTransparency = 0.3
WallCheckButton.Text = "ðŸ›‘ Wall Check: ON"
WallCheckButton.TextColor3 = Color3.fromRGB(50, 255, 50)
WallCheckButton.Font = Enum.Font.GothamBold
WallCheckButton.TextSize = 12
WallCheckButton.Parent = MainFrame

local WallCheckCorner = Instance.new("UICorner")
WallCheckCorner.CornerRadius = UDim.new(0, 8)
WallCheckCorner.Parent = WallCheckButton

local SizeBox = Instance.new("TextBox")
SizeBox.Size = UDim2.new(0, 60, 0, 15) -- Reduced from 80x20
SizeBox.Position = UDim2.new(0, 20, 0, 95) -- Centered and repositioned
SizeBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
SizeBox.BackgroundTransparency = 0.5
SizeBox.Text = "Size: " .. tostring(defaultSize)
SizeBox.TextColor3 = Color3.fromRGB(255, 255, 255)
SizeBox.TextTransparency = 0.5
SizeBox.Font = Enum.Font.Gotham
SizeBox.TextSize = 10
SizeBox.ClearTextOnFocus = false
SizeBox.Parent = MainFrame

local TransparencyBox = Instance.new("TextBox")
TransparencyBox.Size = UDim2.new(0, 60, 0, 15) -- Reduced from 80x20
TransparencyBox.Position = UDim2.new(0, 20, 0, 115) -- Adjusted vertically
TransparencyBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
TransparencyBox.BackgroundTransparency = 0.5
TransparencyBox.Text = "Trans: " .. tostring(defaultTransparency)
TransparencyBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TransparencyBox.TextTransparency = 0.5
TransparencyBox.Font = Enum.Font.Gotham
TransparencyBox.TextSize = 10
TransparencyBox.ClearTextOnFocus = false
TransparencyBox.Parent = MainFrame

-- Animation Function
local function tweenButton(button, goal, duration)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(button, tweenInfo, goal)
    tween:Play()
end

-- Particle Creation Function
local function createParticle(parent, button)
    local particle = Instance.new("Frame")
    particle.Size = UDim2.new(0, 5, 0, 5)
    particle.BackgroundColor3 = Color3.fromRGB(200, 0, 200)
    particle.BorderSizePixel = 0
    particle.ZIndex = 2
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = particle
    local btnPos = button.Position
    local btnSize = button.Size
    local randomX = btnPos.X.Offset + math.random(0, btnSize.X.Offset)
    local randomY = btnPos.Y.Offset + math.random(0, btnSize.Y.Offset)
    particle.Position = UDim2.new(0, randomX, 0, randomY)
    particle.Parent = parent
    local angle = math.random() * 2 * math.pi
    local dx = math.cos(angle)
    local dy = math.sin(angle)
    local distance = 50
    local targetX = randomX + distance * dx
    local targetY = randomY + distance * dy
    local targetPosition = UDim2.new(0, targetX, 0, targetY)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local positionTween = TweenService:Create(particle, tweenInfo, {Position = targetPosition})
    local transparencyTween = TweenService:Create(particle, tweenInfo, {BackgroundTransparency = 1})
    positionTween:Play()
    transparencyTween:Play()
    positionTween.Completed:Connect(function()
        particle:Destroy()
    end)
end

-- Accurate Wall Check Function
local function isPlayerVisible(targetPlayer)
    local camera = workspace.CurrentCamera
    local localChar = Player.Character
    local targetChar = targetPlayer.Character
    
    if not (localChar and targetChar) then return false end
    
    local localRoot = localChar:FindFirstChild("HumanoidRootPart")
    if not localRoot then return false end
    
    -- Parts to check for visibility
    local partsToCheck = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}
    
    -- Blacklist all player characters except the target
    local blacklist = {}
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= targetPlayer and p.Character then
            table.insert(blacklist, p.Character)
        end
    end
    if localChar then
        table.insert(blacklist, localChar)
    end
    
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = blacklist
    
    local rayOrigin = camera.CFrame.Position
    
    for _, partName in pairs(partsToCheck) do
        local part = targetChar:FindFirstChild(partName)
        if part and part:IsA("BasePart") then
            local partPosition = part.Position
            local rayDirection = partPosition - rayOrigin
            local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
            
            if not raycastResult then
                -- Ray reached the part unobstructed
                return true
            elseif raycastResult.Instance:IsDescendantOf(targetChar) then
                -- Ray hit any part of the target character
                return true
            end
        end
    end
    
    -- No rays reached or hit the target
    return false
end

-- Hitbox Manipulation Loop
RunService.RenderStepped:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Player then
            pcall(function()
                -- Parse and clamp input values
                local sizeValue = tonumber(SizeBox.Text:match("%d+")) or defaultSize
                sizeValue = math.max(1, math.min(10000, sizeValue))
                
                local transparencyValue = tonumber(TransparencyBox.Text:match("%d+")) or defaultTransparency
                transparencyValue = math.max(1, math.min(100, transparencyValue))
                local adjustedTransparency = transparencyValue / 100
                
                local shouldApply = hitboxActive and (not wallCheckActive or isPlayerVisible(player))
                
                local root = player.Character.HumanoidRootPart
                if shouldApply then
                    root.Size = Vector3.new(sizeValue, sizeValue, sizeValue)
                    root.Transparency = adjustedTransparency
                    root.BrickColor = BrickColor.new("Really black")
                    root.Material = "Neon"
                    root.CanCollide = false
                else
                    root.Size = Vector3.new(2, 2, 2)
                    root.Transparency = 0
                    root.BrickColor = BrickColor.new("Medium stone grey")
                    root.Material = "SmoothPlastic"
                    root.CanCollide = true
                end
            end)
        end
    end
end)

-- Toggle Button Functionality
ToggleButton.MouseButton1Click:Connect(function()
    hitboxActive = not hitboxActive
    ToggleButton.Text = hitboxActive and "ðŸ”’ Hitbox: ON" or "ðŸ”“ Hitbox: OFF"
    local targetColor = hitboxActive and Color3.fromRGB(50, 255, 50) or Color3.fromRGB(255, 50, 50)
    tweenButton(ToggleButton, {TextColor3 = targetColor}, 0.3)
    for i = 1, 5 do
        createParticle(MainFrame, ToggleButton)
    end
    if not hitboxActive then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= Player then
                pcall(function()
                    local root = player.Character.HumanoidRootPart
                    root.Size = Vector3.new(2, 2, 2)
                    root.Transparency = 0
                    root.BrickColor = BrickColor.new("Medium stone grey")
                    root.Material = "SmoothPlastic"
                    root.CanCollide = true
                end)
            end
        end
    end
end)

ToggleButton.MouseEnter:Connect(function()
    tweenButton(ToggleButton, {Size = UDim2.new(0, 85, 0, 32), BackgroundTransparency = 0.1}, 0.2) -- Adjusted for new size
end)
ToggleButton.MouseLeave:Connect(function()
    tweenButton(ToggleButton, {Size = UDim2.new(0, 80, 0, 30), BackgroundTransparency = 0.3}, 0.2) -- Adjusted for new size
end)

-- Wall Check Button Functionality
WallCheckButton.MouseButton1Click:Connect(function()
    wallCheckActive = not wallCheckActive
    WallCheckButton.Text = wallCheckActive and "ðŸ›‘ Wall Check: ON" or "ðŸ›‘ Wall Check: OFF"
    local targetColor = wallCheckActive and Color3.fromRGB(50, 255, 50) or Color3.fromRGB(255, 50, 50)
    tweenButton(WallCheckButton, {TextColor3 = targetColor}, 0.3)
    for i = 1, 5 do
        createParticle(MainFrame, WallCheckButton)
    end
end)

WallCheckButton.MouseEnter:Connect(function()
    tweenButton(WallCheckButton, {Size = UDim2.new(0, 85, 0, 32), BackgroundTransparency = 0.1}, 0.2) -- Adjusted for new size
end)
WallCheckButton.MouseLeave:Connect(function()
    tweenButton(WallCheckButton, {Size = UDim2.new(0, 80, 0, 30), BackgroundTransparency = 0.3}, 0.2) -- Adjusted for new size
end)

-- Size Text Box Functionality
SizeBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newSize = tonumber(SizeBox.Text:match("%d+"))
        if newSize and newSize >= 1 and newSize <= 10000 then
            defaultSize = newSize
            SizeBox.Text = "Size: " .. tostring(defaultSize)
        else
            SizeBox.Text = "Size: " .. tostring(defaultSize)
        end
    end
end)

-- Transparency Text Box Functionality
TransparencyBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newTrans = tonumber(TransparencyBox.Text:match("%d+"))
        if newTrans and newTrans >= 1 and newTrans <= 100 then
            defaultTransparency = newTrans
            TransparencyBox.Text = "Trans: " .. tostring(defaultTransparency)
        else
            TransparencyBox.Text = "Trans: " .. tostring(defaultTransparency)
        end
    end
end)

-- Dragging Functionality
local dragging, dragInput, dragStart, startPos
MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)
MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
MainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Initial Animation
MainFrame.Position = UDim2.new(0.5, -50, 0.5, 80) -- Adjusted for new size
tweenButton(MainFrame, {Position = UDim2.new(0.5, -50, 0.5, -80)}, 0.5)

-- Cleanup
Players.PlayerRemoving:Connect(function(player)
    if player == Player then
        ScreenGui:Destroy()
    end
end)
