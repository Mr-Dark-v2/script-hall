-- [[
--   The Mist Hub - Ultra Advanced Animation Logger
--   iOS-Inspired with Advanced Physics & Animations
--   Updated: August 20, 2025
--   Features: Spring physics, magnetic effects, liquid morphing, parallax depth, gesture recognition
--   FINAL VERSION: Implements animated filter buttons, expanding cards w/ actions, global actions, visual states, and resized GUI.
--   Base file: ai_studio_code (37).txt (merged + extended)
-- ]]

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Advanced Animation System
local AnimationEngine = {}
local SpringPhysics = {
    damping = 0.75,
    stiffness = 0.4,
    tension = 300,
    friction = 30
}

-- Enhanced Easing Functions
local EasingFunctions = {
    spring = TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 0, false, 0),
    elastic = TweenInfo.new(0.8, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0),
    bounce = TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out, 0, false, 0),
    smooth = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out, 0, false, 0),
    liquid = TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, 0),
    magnetic = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0)
}

-- iOS-inspired Color Palette
local Colors = {
    background = Color3.fromRGB(0, 0, 0),
    surface = Color3.fromRGB(28, 28, 30),
    surfaceElevated = Color3.fromRGB(44, 44, 46),
    surfaceSelected = Color3.fromRGB(58, 58, 60),
    textPrimary = Color3.fromRGB(255, 255, 255),
    textSecondary = Color3.fromRGB(142, 142, 147),
    textTertiary = Color3.fromRGB(99, 99, 102),
    accent = Color3.fromRGB(0, 255, 255),
    accentDark = Color3.fromRGB(0, 200, 200),
    success = Color3.fromRGB(52, 199, 89),
    warning = Color3.fromRGB(255, 159, 10),
    error = Color3.fromRGB(255, 69, 58),
    separator = Color3.fromRGB(56, 56, 58),
    glass = Color3.fromRGB(255, 255, 255)
}

-- Global State Management
local AppState = {
    initialized = false,
    currentTab = "animations",
    isAnimating = false,             -- global GUI anim gate (header)
    isCardAnimating = false,         -- debounce for card open/close
    mousePosition = Vector2.new(0, 0),
    selectedCount = 0,
    searchQuery = "",
    filterMode = "all",
    activeFilterButton = nil,        -- animated filters: active instance
    selectedCard = nil               -- currently expanded card
}

-- Data Storage
local DataStore = {
    animations = {},
    filtered = {},
    selected = {},
    settings = {
        copyAsLink = false,
        enablePhysics = true,
        enableMagneticEffects = true,
        animationSpeed = 1.0
    },
    performance = {
        totalAnimations = 0,
        totalUsage = 0,
        averageLoadTime = 0,
        memoryUsage = 0
    }
}

-- UI References (will be populated during creation)
local UI = {
    filterButtons = {} -- holds filter button instances by filter.mode
}

-- Advanced Animation Engine
function AnimationEngine.springTo(object, properties, config)
    config = config or {}
    local duration = config.duration or 0.6
    local style = config.elastic and Enum.EasingStyle.Elastic or Enum.EasingStyle.Back
    local direction = config.direction or Enum.EasingDirection.Out

    local tween = TweenService:Create(object,
        TweenInfo.new(duration, style, direction), properties)

    if config.onComplete then
        tween.Completed:Connect(config.onComplete)
    end

    tween:Play()
    return tween
end

function AnimationEngine.liquidMorph(object, targetProps, duration)
    duration = duration or 0.4
    local t = TweenService:Create(object,
        TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
        targetProps)
    return t
end

function AnimationEngine.magneticHover(object, attractionStrength)
    attractionStrength = attractionStrength or 10
    local connection
    local originalPos = object.Position

    object.MouseEnter:Connect(function()
        connection = RunService.Heartbeat:Connect(function()
            if AppState.isAnimating then return end
            local mousePos = UserInputService:GetMouseLocation()
            local objCenter = object.AbsolutePosition + object.AbsoluteSize/2
            local distance = (Vector2.new(mousePos.X, mousePos.Y) - objCenter).Magnitude

            if distance < 100 then
                local attraction = math.max(0, (100 - distance) / 100) * attractionStrength
                local direction = (Vector2.new(mousePos.X, mousePos.Y) - objCenter).Unit
                local offset = direction * attraction

                AnimationEngine.springTo(object, {
                    Position = UDim2.new(originalPos.X.Scale, originalPos.X.Offset + offset.X,
                                         originalPos.Y.Scale, originalPos.Y.Offset + offset.Y)
                }, {duration = 0.1})
            end
        end)
    end)

    object.MouseLeave:Connect(function()
        if connection then connection:Disconnect() end
        AnimationEngine.springTo(object, {Position = originalPos}, {duration = 0.3})
    end)
end

function AnimationEngine.rippleEffect(parent, clickPos)
    local ripple = Instance.new("Frame")
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Position = UDim2.new(0, clickPos.X - parent.AbsolutePosition.X, 0, clickPos.Y - parent.AbsolutePosition.Y)
    ripple.BackgroundColor3 = Colors.accent
    ripple.BackgroundTransparency = 0.3
    ripple.BorderSizePixel = 0
    ripple.ZIndex = parent.ZIndex + 10
    ripple.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = ripple

    ripple.AnchorPoint = Vector2.new(0.5, 0.5)

    local maxSize = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2

    local expandTween = TweenService:Create(ripple, EasingFunctions.smooth, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    })

    expandTween:Play()
    expandTween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

function AnimationEngine.breathingAnimation(object, intensity)
    intensity = intensity or 0.05
    local originalSize = object.Size

    local breathe = TweenService:Create(object,
        TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Size = UDim2.new(originalSize.X.Scale + intensity, originalSize.X.Offset,
                         originalSize.Y.Scale + intensity, originalSize.Y.Offset)
    })

    breathe:Play()
    return breathe
end

-- UI Component Factories
function UI.createCard(parent, size, position, config)
    config = config or {}
    local card = Instance.new("Frame")
    card.Size = size
    card.Position = position
    card.BackgroundColor3 = config.color or Colors.surface
    card.BorderSizePixel = 0
    card.ClipsDescendants = true
    card.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, config.cornerRadius or 12)
    corner.Parent = card

    -- Advanced shadow with blur effect
    local shadow = Instance.new("Frame")
    shadow.Size = UDim2.new(1, 6, 1, 6)
    shadow.Position = UDim2.new(0, -3, 0, -3)
    shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    shadow.BackgroundTransparency = config.shadowOpacity or 0.8
    shadow.ZIndex = card.ZIndex - 1
    shadow.Parent = card.Parent

    local shadowCorner = Instance.new("UICorner")
    shadowCorner.CornerRadius = UDim.new(0, (config.cornerRadius or 12) + 2)
    shadowCorner.Parent = shadow

    -- Magnetic hover if enabled
    if config.magnetic and DataStore.settings.enableMagneticEffects then
        AnimationEngine.magneticHover(card, config.magneticStrength or 5)
    end

    -- Hover glow effect
    if config.glowOnHover then
        local glow = Instance.new("UIStroke")
        glow.Color = Colors.accent
        glow.Thickness = 0
        glow.Transparency = 1
        glow.Parent = card

        card.MouseEnter:Connect(function()
            AnimationEngine.springTo(glow, {Thickness = 2, Transparency = 0.3})
        end)

        card.MouseLeave:Connect(function()
            AnimationEngine.springTo(glow, {Thickness = 0, Transparency = 1})
        end)
    end

    return card, shadow
end

function UI.createButton(parent, text, size, position, style, config)
    style = style or "secondary"
    config = config or {}

    local button = Instance.new("TextButton")
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = style == "primary" and Colors.accent or Colors.surfaceElevated
    button.Text = text
    button.TextColor3 = style == "primary" and Colors.background or Colors.textPrimary
    button.TextSize = config.textSize or 16
    button.Font = config.font or Enum.Font.GothamMedium
    button.BorderSizePixel = 0
    button.ClipsDescendants = true
    button.AutoButtonColor = false
    button.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, config.cornerRadius or 10)
    corner.Parent = button

    -- Advanced button states
    local originalSize = size
    local isPressed = false

    -- Hover effect with spring physics
    button.MouseEnter:Connect(function()
        if not isPressed then
            AnimationEngine.springTo(button, {
                BackgroundColor3 = style == "primary" and Colors.accentDark or Colors.surfaceSelected
            }, {duration = 0.2})
        end
    end)

    button.MouseLeave:Connect(function()
        if not isPressed then
            AnimationEngine.springTo(button, {
                BackgroundColor3 = style == "primary" and Colors.accent or Colors.surfaceElevated
            }, {duration = 0.2})
        end
    end)

    -- Press effect with ripple
    button.MouseButton1Down:Connect(function()
        isPressed = true
        local mousePos = UserInputService:GetMouseLocation()
        AnimationEngine.rippleEffect(button, Vector2.new(mousePos.X, mousePos.Y))

        AnimationEngine.springTo(button, {
            Size = UDim2.new(originalSize.X.Scale * 0.95, originalSize.X.Offset,
                             originalSize.Y.Scale * 0.95, originalSize.Y.Offset),
            BackgroundColor3 = style == "primary" and Color3.fromRGB(0, 180, 180) or Colors.surface
        }, {duration = 0.1})
    end)

    button.MouseButton1Up:Connect(function()
        isPressed = false
        AnimationEngine.springTo(button, {
            Size = originalSize,
            BackgroundColor3 = style == "primary" and Colors.accent or Colors.surfaceElevated
        }, {duration = 0.2, elastic = true})
    end)

    return button
end

function UI.createLabel(parent, text, size, position, textSize, style, config)
    style = style or "primary"
    config = config or {}

    local label = Instance.new("TextLabel")
    label.Size = size
    label.Position = position
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = style == "primary" and Colors.textPrimary or
                      style == "secondary" and Colors.textSecondary or Colors.textTertiary
    label.TextSize = textSize or 16
    label.Font = config.font or (style == "title" and Enum.Font.GothamBold or Enum.Font.Gotham)
    label.TextXAlignment = config.alignment or Enum.TextXAlignment.Left
    label.TextYAlignment = Enum.TextYAlignment.Center
    label.TextWrapped = config.wrapped or false
    label.Parent = parent

    -- Animated text effects
    if config.typewriter then
        local originalText = text
        label.Text = ""
        for i = 1, #originalText do
            task.wait(0.03)
            label.Text = originalText:sub(1, i)
        end
    end

    return label
end

-- Helpers for card expand/collapse
local function setCardVisualState(card, entryData)
    -- Default visuals
    local baseBg = Colors.surfaceElevated
    local strokeColor = Colors.separator
    local textPrimary = Colors.textPrimary
    local textSecondary = Colors.textSecondary
    local textTertiary = Colors.textTertiary

    -- Visual state overrides
    if entryData.isBlocked then
        baseBg = Color3.fromRGB(80, 25, 25)
        strokeColor = Colors.error
        textPrimary = Color3.fromRGB(255, 220, 220)
        textSecondary = Color3.fromRGB(255, 180, 180)
        textTertiary = Color3.fromRGB(230, 150, 150)
    elseif entryData.isExcluded then
        baseBg = Colors.surface
        textPrimary = Colors.textSecondary
        textSecondary = Colors.textTertiary
        textTertiary = Colors.textTertiary
    end

    card.BackgroundColor3 = baseBg
    local stroke = card:FindFirstChild("StateStroke")
    if not stroke then
        stroke = Instance.new("UIStroke")
        stroke.Name = "StateStroke"
        stroke.Thickness = 1
        stroke.Transparency = 0.5
        stroke.Parent = card
    end
    stroke.Color = strokeColor

    -- update labels tint (children are TextLabels created after)
    for _, child in ipairs(card:GetChildren()) do
        if child:IsA("TextLabel") then
            -- choose by semantic region using positions; keep left labels brighter
            if child.Text:find("^ID:") then
                child.TextColor3 = textSecondary
            elseif child.Text:find("^Usage:") or child.Text:find("s$") then
                child.TextColor3 = textTertiary
            else
                child.TextColor3 = textPrimary
            end
        end
    end
end

-- Data Management Functions
function DataStore.addAnimation(name, id, timestamp, duration, priority, loadTime)
    local numericId = tonumber(id:match("%d+")) or 0

    -- Check for duplicates
    for _, existing in ipairs(DataStore.animations) do
        if existing.numericId == numericId then
            existing.usageCount = existing.usageCount + 1
            existing.lastUsed = timestamp
            DataStore.applyFilters() -- Refresh UI if data of existing entry changes
            return existing, false
        end
    end

    -- Create new entry
    local entry = {
        name = name or "Unknown",
        id = id,
        numericId = numericId,
        timestamp = timestamp,
        duration = duration or 0,
        priority = priority or "Action",
        loadTime = loadTime or math.random(10, 100),
        usageCount = 1,
        lastUsed = timestamp,
        tags = {},
        notes = "",
        memoryUsage = math.random(50, 500),
        isBlocked = false,     -- NEW
        isExcluded = false     -- NEW
    }

    table.insert(DataStore.animations, 1, entry) -- Add to beginning for recent-first
    DataStore.performance.totalAnimations = #DataStore.animations
    DataStore.performance.totalUsage = DataStore.performance.totalUsage + 1

    -- Update average load time
    local total = 0
    for _, anim in ipairs(DataStore.animations) do
        total = total + anim.loadTime
    end
    DataStore.performance.averageLoadTime = total / #DataStore.animations

    if UI.statsLabel then
        UI.statsLabel.Text = string.format("%d animations logged | Avg. Load: %.2fms", DataStore.performance.totalAnimations, DataStore.performance.averageLoadTime)
    end
    DataStore.applyFilters()

    return entry, true
end

function DataStore.applyFilters()
    DataStore.filtered = {}

    for _, entry in ipairs(DataStore.animations) do
        -- Excluded entries are hidden from the list
        if not entry.isExcluded then
            local query = AppState.searchQuery:lower()
            local matchesSearch = query == "" or
                                 entry.name:lower():find(query) or
                                 tostring(entry.numericId):find(query) or
                                 entry.priority:lower():find(query)

            local matchesFilter = true
            if AppState.filterMode == "high_usage" then
                matchesFilter = entry.usageCount >= 3
            elseif AppState.filterMode == "recent" then
                matchesFilter = (os.time() - entry.lastUsed) < 3600 -- Within the last hour
            elseif AppState.filterMode == "long_duration" then
                matchesFilter = entry.duration > 2.0
            end

            if matchesSearch and matchesFilter then
                table.insert(DataStore.filtered, entry)
            end
        end
    end

    if UI.refreshAnimationList then
        UI.refreshAnimationList()
    end
end

-- Forward declarations for functions used inside refreshAnimationList
local function collapseCard(card)
    if not card or card:GetAttribute("Expanded") ~= true then return end
    if AppState.isCardAnimating then return end
    AppState.isCardAnimating = true

    local actionContainer = card:FindFirstChild("ActionContainer")
    local targetHeight = 70
    local delta = (card.AbsoluteSize.Y - targetHeight)

    local list = UI.animationList
    if list then
        list.CanvasSize = UDim2.new(0, 0, 0, math.max(0, list.CanvasSize.Y.Offset - delta))
    end

    -- Hide action buttons
    if actionContainer then
        for _, b in ipairs(actionContainer:GetChildren()) do
            if b:IsA("TextButton") then
                TweenService:Create(b, EasingFunctions.smooth, {Size = UDim2.new(0,0,0,0), TextTransparency = 1, BackgroundTransparency = 1}):Play()
            end
        end
    end

    TweenService:Create(card, EasingFunctions.smooth, {Size = UDim2.new(1, 0, 0, targetHeight)}):Play()

    task.delay(0.25, function()
        if actionContainer then
            actionContainer.Visible = false
        end
        card:SetAttribute("Expanded", false)
        if AppState.selectedCard == card then
            AppState.selectedCard = nil
        end
        AppState.isCardAnimating = false
    end)
end

local function expandCard(card)
    if not card or card:GetAttribute("Expanded") == true then return end
    if AppState.isCardAnimating then return end
    AppState.isCardAnimating = true

    local actionContainer = card:FindFirstChild("ActionContainer")
    local targetHeight = 110 -- 70 base + 40 actions
    local delta = (targetHeight - card.AbsoluteSize.Y)

    local list = UI.animationList
    if list then
        list.CanvasSize = UDim2.new(0, 0, 0, list.CanvasSize.Y.Offset + delta)
    end

    -- Selected visuals
    TweenService:Create(card, EasingFunctions.smooth, {BackgroundColor3 = Colors.surfaceSelected, Size = UDim2.new(1, 0, 0, targetHeight)}):Play()

    task.delay(0.1, function()
        if actionContainer then
            actionContainer.Visible = true
            -- Staggered action buttons reveal
            local idx = 0
            for _, b in ipairs(actionContainer:GetChildren()) do
                if b:IsA("TextButton") then
                    idx += 1
                    task.delay(0.04 * (idx - 1), function()
                        b.BackgroundTransparency = 0
                        b.TextTransparency = 0
                        TweenService:Create(b, EasingFunctions.spring, {Size = UDim2.new(0, 95, 0, 28)}):Play()
                    end)
                end
            end
        end
    end)

    task.delay(0.35, function()
        card:SetAttribute("Expanded", true)
        AppState.selectedCard = card
        AppState.isCardAnimating = false
    end)
end

local function toggleCard(card)
    if not card then return end
    if AppState.selectedCard and AppState.selectedCard ~= card then
        collapseCard(AppState.selectedCard)
        -- After collapse finishes, expand this one
        task.delay(0.28, function()
            expandCard(card)
        end)
    else
        if card:GetAttribute("Expanded") == true then
            collapseCard(card)
        else
            expandCard(card)
        end
    end
end

-- UI: Build the list with interactive cards
function UI.refreshAnimationList()
    if not UI.animationList then return end

    for _, child in ipairs(UI.animationList:GetChildren()) do
        if child:IsA("Frame") or child:IsA("TextButton") then
            child:Destroy()
        end
    end

    UI.animationList.CanvasSize = UDim2.new(0, 0, 0, #DataStore.filtered * 80)

    for i, entryData in ipairs(DataStore.filtered) do
        -- Card as TextButton to handle clicks
        local card = Instance.new("TextButton")
        card.Size = UDim2.new(1, 0, 0, 70)
        card.BackgroundColor3 = Colors.surfaceElevated
        card.BorderSizePixel = 0
        card.AutoButtonColor = false
        card.Text = ""
        card.LayoutOrder = i
        card.Parent = UI.animationList
        card:SetAttribute("Expanded", false)

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10)
        corner.Parent = card

        -- Labels
        local nameLbl = UI.createLabel(card, entryData.name, UDim2.new(0.6, -20, 0, 30), UDim2.new(0, 15, 0, 5), 16, "primary")
        local idLbl = UI.createLabel(card, "ID: " .. entryData.id, UDim2.new(0.6, -20, 0, 20), UDim2.new(0, 15, 0, 35), 12, "secondary")
        local usageLbl = UI.createLabel(card, "Usage: " .. entryData.usageCount .. "x", UDim2.new(0.2, 0, 1, 0), UDim2.new(0.65, 0, 0, 0), 14, "tertiary")
        local durLbl = UI.createLabel(card, string.format("%.2fs", entryData.duration), UDim2.new(0.15, 0, 1, 0), UDim2.new(0.85, 0, 0, 0), 14, "tertiary")

        -- Apply visual state (blocked/excluded/default)
        setCardVisualState(card, entryData)

        -- Action container (hidden)
        local actionContainer = Instance.new("Frame")
        actionContainer.Name = "ActionContainer"
        actionContainer.Size = UDim2.new(1, -20, 0, 40)
        actionContainer.Position = UDim2.new(0, 10, 1, -45)
        actionContainer.BackgroundTransparency = 1
        actionContainer.Visible = false
        actionContainer.ClipsDescendants = true
        actionContainer.Parent = card

        local actionLayout = Instance.new("UIListLayout")
        actionLayout.FillDirection = Enum.FillDirection.Horizontal
        actionLayout.Padding = UDim.new(0, 8)
        actionLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        actionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        actionLayout.Parent = actionContainer

        -- Helper to create tiny action buttons
        local function makeAction(text)
            local b = UI.createButton(actionContainer, text, UDim2.new(0,0,0,0), UDim2.new(), "secondary", {cornerRadius = 8, textSize = 12})
            b.BackgroundTransparency = 1
            b.TextTransparency = 1
            return b
        end

        local playBtn = makeAction("Play")
        local copyBtn = makeAction("Copy ID")
        local toggleBlockBtn = makeAction(entryData.isBlocked and "Unblock" or "Block")
        local toggleExcludeBtn = makeAction(entryData.isExcluded and "Include" or "Exclude")

        playBtn.MouseButton1Click:Connect(function()
            -- Simulate "play": purely UI feedback here
            TweenService:Create(nameLbl, EasingFunctions.bounce, {TextTransparency = 0.3}):Play()
            task.delay(0.25, function()
                TweenService:Create(nameLbl, EasingFunctions.smooth, {TextTransparency = 0}):Play()
            end)
        end)

        copyBtn.MouseButton1Click:Connect(function()
            -- Roblox does not allow direct clipboard set in all contexts; we show a toast-like feedback
            local toast = Instance.new("TextLabel")
            toast.Size = UDim2.new(0, 220, 0, 30)
            toast.Position = UDim2.new(1, -230, 0, -35)
            toast.BackgroundColor3 = Colors.surfaceSelected
            toast.Text = "Copied: " .. entryData.id
            toast.TextColor3 = Colors.textPrimary
            toast.TextSize = 12
            toast.Font = Enum.Font.Gotham
            toast.Parent = card
            local c = Instance.new("UICorner")
            c.CornerRadius = UDim.new(0, 8)
            c.Parent = toast
            TweenService:Create(toast, EasingFunctions.smooth, {Position = UDim2.new(1, -230, 0, 5)}):Play()
            task.delay(1.4, function()
                TweenService:Create(toast, EasingFunctions.smooth, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
                task.delay(0.2, function() toast:Destroy() end)
            end)
        end)

        toggleBlockBtn.MouseButton1Click:Connect(function()
            entryData.isBlocked = not entryData.isBlocked
            -- If blocked, also ensure it's included (not excluded) to be visible with red tint
            if entryData.isBlocked then entryData.isExcluded = false end
            toggleBlockBtn.Text = entryData.isBlocked and "Unblock" or "Block"
            toggleExcludeBtn.Text = entryData.isExcluded and "Include" or "Exclude"
            setCardVisualState(card, entryData)
        end)

        toggleExcludeBtn.MouseButton1Click:Connect(function()
            entryData.isExcluded = not entryData.isExcluded
            -- If excluded, remove any blocked state for consistency
            if entryData.isExcluded then entryData.isBlocked = false end
            toggleExcludeBtn.Text = entryData.isExcluded and "Include" or "Exclude"
            toggleBlockBtn.Text = entryData.isBlocked and "Unblock" or "Block"
            -- If it becomes excluded, we remove it from view with a single refresh
            DataStore.applyFilters()
        end)

        -- Card click logic with debounce + toggle
        card.MouseButton1Click:Connect(function()
            if AppState.isCardAnimating then return end
            toggleCard(card)
        end)
    end
end

function UI.switchTab(tabName)
    AppState.currentTab = tabName
    UI.animationsTab.Visible = (tabName == "animations")
    UI.settingsTab.Visible = (tabName == "settings")
    UI.analyticsTab.Visible = (tabName == "analytics")
end

-- Main UI Creation
function UI.createMainInterface()
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui", 10)
    if not playerGui then return end

    local gui = Instance.new("ScreenGui")
    gui.Name = "MistHubUltra"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.IgnoreGuiInset = true
    gui.Parent = playerGui

    local mainFrame = Instance.new("CanvasGroup")
    -- RESIZED: 0.55 x 0.75 and centered via (1-scale)/2
    mainFrame.Size = UDim2.new(0.55, 0, 0.75, 0)
    mainFrame.Position = UDim2.new(0.225, 0, 0.125, 0)
    mainFrame.BackgroundColor3 = Colors.background
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.GroupTransparency = 0
    mainFrame.Parent = gui

    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 20)
    mainCorner.Parent = mainFrame

    local particleContainer = Instance.new("Frame")
    particleContainer.Size = UDim2.new(1, 0, 1, 0)
    particleContainer.BackgroundTransparency = 1
    particleContainer.ClipsDescendants = true
    particleContainer.Parent = mainFrame

    for i = 1, 8 do
        local particle = Instance.new("Frame")
        particle.Size = UDim2.new(0, math.random(2, 4), 0, math.random(2, 4))
        particle.Position = UDim2.new(math.random(0, 100)/100, 0, math.random(0, 100)/100, 0)
        particle.BackgroundColor3 = Colors.accent
        particle.BackgroundTransparency = 0.7
        particle.BorderSizePixel = 0
        particle.Parent = particleContainer

        local particleCorner = Instance.new("UICorner")
        particleCorner.CornerRadius = UDim.new(1, 0)
        particleCorner.Parent = particle

        local floatTween = TweenService:Create(particle,
            TweenInfo.new(math.random(3, 8), Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
            Position = UDim2.new(math.random(0, 100)/100, 0, math.random(0, 100)/100, 0),
            BackgroundTransparency = math.random(3, 9)/10
        })
        floatTween:Play()
    end

    local header = UI.createCard(mainFrame, UDim2.new(1, 0, 0, 120), UDim2.new(0, 0, 0, 0), {
        color = Colors.surface,
        cornerRadius = 20,
        glowOnHover = false
    })

    local logo = UI.createLabel(header, "MIST HUB", UDim2.new(0, 300, 0, 40), UDim2.new(0, 25, 0, 20), 28, "title")
    logo.TextColor3 = Colors.accent
    AnimationEngine.breathingAnimation(logo, 0.02)

    local closeBtn = UI.createButton(header, "✕", UDim2.new(0, 50, 0, 50), UDim2.new(1, -65, 0, 15), "secondary", {
        cornerRadius = 25
    })

    closeBtn.MouseButton1Click:Connect(function()
        AppState.isAnimating = true
        AnimationEngine.springTo(mainFrame, {
            Position = UDim2.new(0.225, 0, -1, 0),
            GroupTransparency = 1
        }, {
            duration = 0.5,
            onComplete = function()
                gui:Destroy()
            end
        })
    end)

    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(0.6, 0, 0, 45)
    tabContainer.Position = UDim2.new(0.2, 0, 0, 70)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = header

    local tabs = {"Animations", "Settings", "Analytics"}
    local tabButtons = {}
    local tabIndicator = Instance.new("Frame")
    tabIndicator.Size = UDim2.new(1/#tabs, -4, 0, 3)
    tabIndicator.Position = UDim2.new(0, 2, 1, -5)
    tabIndicator.BackgroundColor3 = Colors.accent
    tabIndicator.BorderSizePixel = 0
    tabIndicator.Parent = tabContainer

    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 2)
    indicatorCorner.Parent = tabIndicator

    for i, tabName in ipairs(tabs) do
        local tabButton = UI.createButton(tabContainer, tabName,
            UDim2.new(1/#tabs, -2, 1, -8),
            UDim2.new((i-1)/#tabs, 1, 0, 0), "secondary", {
            cornerRadius = 8,
            textSize = 15
        })

        tabButton.MouseButton1Click:Connect(function()
            if AppState.currentTab == tabName:lower() then return end

            AnimationEngine.liquidMorph(tabIndicator, {
                Position = UDim2.new((i-1)/#tabs, 2, 1, -5)
            }, 0.3):Play()

            for j, btn in ipairs(tabButtons) do
                local isSelected = (j == i)
                AnimationEngine.springTo(btn, {
                    TextColor3 = isSelected and Colors.accent or Colors.textSecondary
                }, {duration = 0.3})
            end

            UI.switchTab(tabName:lower())
        end)

        table.insert(tabButtons, tabButton)
    end

    tabButtons[1].TextColor3 = Colors.accent

    UI.statsLabel = UI.createLabel(header, "0 animations logged",
        UDim2.new(0, 400, 0, 20), UDim2.new(0.5, -200, 0, 25), 14, "secondary", {alignment = Enum.TextXAlignment.Center})

    local contentArea = Instance.new("Frame")
    contentArea.Size = UDim2.new(1, 0, 1, -120)
    contentArea.Position = UDim2.new(0, 0, 0, 120)
    contentArea.BackgroundTransparency = 1
    contentArea.Parent = mainFrame

    UI.animationsTab = Instance.new("Frame")
    UI.animationsTab.Size = UDim2.new(1, 0, 1, 0)
    UI.animationsTab.BackgroundTransparency = 1
    UI.animationsTab.Visible = true
    UI.animationsTab.Parent = contentArea

    UI.settingsTab = Instance.new("Frame")
    UI.settingsTab.Size = UDim2.new(1, 0, 1, 0)
    UI.settingsTab.BackgroundTransparency = 1
    UI.settingsTab.Visible = false
    UI.settingsTab.Parent = contentArea

    UI.analyticsTab = Instance.new("Frame")
    UI.analyticsTab.Size = UDim2.new(1, 0, 1, 0)
    UI.analyticsTab.BackgroundTransparency = 1
    UI.analyticsTab.Visible = false
    UI.analyticsTab.Parent = contentArea

    UI.setupAnimationsTab()
    UI.setupSettingsTab()
    UI.setupAnalyticsTab()

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            AppState.mousePosition = Vector2.new(input.Position.X, input.Position.Y)
        end
    end)

    -- Entrance animation
    mainFrame.Position = UDim2.new(0.225, 0, -1, 0)
    mainFrame.GroupTransparency = 1
    task.wait(0.1)
    AnimationEngine.springTo(mainFrame, {
        Position = UDim2.new(0.225, 0, 0.125, 0),
        GroupTransparency = 0
    }, {duration = 0.8, elastic = true})

    AppState.initialized = true
end

-- Tab setup functions
function UI.setupAnimationsTab()
    local searchContainer = UI.createCard(UI.animationsTab,
        UDim2.new(1, -20, 0, 50), UDim2.new(0, 10, 0, 10), {
        color = Colors.surfaceElevated,
        cornerRadius = 15,
        magnetic = true,
        magneticStrength = 3
    })

    -- Search box
    UI.searchBox = Instance.new("TextBox")
    UI.searchBox.Size = UDim2.new(1, -420, 1, -15)
    UI.searchBox.Position = UDim2.new(0, 15, 0, 7.5)
    UI.searchBox.BackgroundTransparency = 1
    UI.searchBox.Text = ""
    UI.searchBox.PlaceholderText = "Search animations by name or ID..."
    UI.searchBox.TextColor3 = Colors.textPrimary
    UI.searchBox.PlaceholderColor3 = Colors.textTertiary
    UI.searchBox.TextSize = 16
    UI.searchBox.Font = Enum.Font.Gotham
    UI.searchBox.ClearTextOnFocus = false
    UI.searchBox.Parent = searchContainer

    UI.searchBox.Changed:Connect(function(property)
        if property == "Text" then
            AppState.searchQuery = UI.searchBox.Text
            DataStore.applyFilters()
        end
    end)

    -- Filter buttons (animated, single active)
    local filterContainer = Instance.new("Frame")
    filterContainer.Size = UDim2.new(0, 230, 1, 0)
    filterContainer.Position = UDim2.new(1, -400, 0, 0)
    filterContainer.BackgroundTransparency = 1
    filterContainer.Parent = searchContainer

    local listLayout = Instance.new("UIListLayout")
    listLayout.FillDirection = Enum.FillDirection.Horizontal
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = filterContainer

    local filters = {
        {name = "All", mode = "all"},
        {name = "Recent", mode = "recent"},
        {name = "Popular", mode = "high_usage"},
        {name = "Long", mode = "long_duration"}
    }

    local function activateFilter(newBtn, mode)
        if AppState.activeFilterButton == newBtn then return end

        -- Deactivate old
        if AppState.activeFilterButton then
            AnimationEngine.springTo(AppState.activeFilterButton, {
                BackgroundColor3 = Colors.surfaceElevated,
                TextColor3 = Colors.textPrimary,
                Size = UDim2.new(0, 55, 0, 30)
            }, {duration = 0.2})
        end

        -- Activate new
        AnimationEngine.springTo(newBtn, {
            BackgroundColor3 = Colors.accent,
            TextColor3 = Colors.background,
            Size = UDim2.new(0, 65, 0, 32)
        }, {duration = 0.2})

        AppState.activeFilterButton = newBtn
        AppState.filterMode = mode
        DataStore.applyFilters()
    end

    for i, filter in ipairs(filters) do
        local filterBtn = UI.createButton(filterContainer, filter.name,
            UDim2.new(0, 55, 0, 30), UDim2.new(), "secondary", {
            cornerRadius = 15,
            textSize = 12
        })
        filterBtn.LayoutOrder = i
        UI.filterButtons[filter.mode] = filterBtn

        filterBtn.MouseButton1Click:Connect(function()
            activateFilter(filterBtn, filter.mode)
        end)
    end

    -- Explicitly set "All" default active state
    task.defer(function()
        if UI.filterButtons["all"] then
            activateFilter(UI.filterButtons["all"], "all")
        end
    end)

    -- Global actions container (right of filter buttons)
    local actionsContainer = Instance.new("Frame")
    actionsContainer.Size = UDim2.new(0, 350, 1, 0)
    actionsContainer.Position = UDim2.new(1, -350, 0, 0)
    actionsContainer.BackgroundTransparency = 1
    actionsContainer.Parent = searchContainer

    local actLayout = Instance.new("UIListLayout")
    actLayout.FillDirection = Enum.FillDirection.Horizontal
    actLayout.SortOrder = Enum.SortOrder.LayoutOrder
    actLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    actLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    actLayout.Padding = UDim.new(0, 6)
    actLayout.Parent = actionsContainer

    local clearAllBtn = UI.createButton(actionsContainer, "Clear All",
        UDim2.new(0, 90, 0, 30), UDim2.new(), "secondary", {cornerRadius = 12, textSize = 12})
    local unblockAllBtn = UI.createButton(actionsContainer, "Unblock All",
        UDim2.new(0, 110, 0, 30), UDim2.new(), "secondary", {cornerRadius = 12, textSize = 12})
    local includeAllBtn = UI.createButton(actionsContainer, "Include All",
        UDim2.new(0, 110, 0, 30), UDim2.new(), "secondary", {cornerRadius = 12, textSize = 12})

    clearAllBtn.MouseButton1Click:Connect(function()
        DataStore.animations = {}
        DataStore.performance.totalAnimations = 0
        DataStore.performance.totalUsage = 0
        DataStore.performance.averageLoadTime = 0
        if UI.statsLabel then
            UI.statsLabel.Text = "0 animations logged"
        end
        DataStore.applyFilters()
    end)

    unblockAllBtn.MouseButton1Click:Connect(function()
        for _, e in ipairs(DataStore.animations) do
            e.isBlocked = false
        end
        DataStore.applyFilters() -- single refresh (performance)
    end)

    includeAllBtn.MouseButton1Click:Connect(function()
        for _, e in ipairs(DataStore.animations) do
            e.isExcluded = false
        end
        DataStore.applyFilters() -- single refresh (performance)
    end)

    -- Scrolling list
    UI.animationList = Instance.new("ScrollingFrame")
    UI.animationList.Size = UDim2.new(1, -20, 1, -80)
    UI.animationList.Position = UDim2.new(0, 10, 0, 70)
    UI.animationList.BackgroundTransparency = 1
    UI.animationList.BorderSizePixel = 0
    UI.animationList.ScrollBarImageColor3 = Colors.accent
    UI.animationList.ScrollBarThickness = 6
    UI.animationList.Parent = UI.animationsTab

    local listLayoutAnims = Instance.new("UIListLayout")
    listLayoutAnims.FillDirection = Enum.FillDirection.Vertical
    listLayoutAnims.SortOrder = Enum.SortOrder.LayoutOrder
    listLayoutAnims.Padding = UDim.new(0, 10)
    listLayoutAnims.Parent = UI.animationList

    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 5)
    padding.PaddingLeft = UDim.new(0, 5)
    padding.PaddingRight = UDim.new(0, 5)
    padding.Parent = UI.animationList
end

function UI.setupSettingsTab()
    UI.createLabel(UI.settingsTab, "Settings", UDim2.new(1, 0, 0, 50), UDim2.new(0, 0, 0, 20), 24, "title", {alignment = Enum.TextXAlignment.Center})
end

function UI.setupAnalyticsTab()
    UI.createLabel(UI.analyticsTab, "Analytics", UDim2.new(1, 0, 0, 50), UDim2.new(0, 0, 0, 20), 24, "title", {alignment = Enum.TextXAlignment.Center})
end

-- Animation listener (fixed with proper end)
local function setupAnimationListener()
    local player = Players.LocalPlayer

    local function onCharacterAdded(character)
        local humanoid = character:WaitForChild("Humanoid")
        if not humanoid then return end

        local animator = humanoid:WaitForChild("Animator")
        if not animator then return end

        animator.AnimationPlayed:Connect(function(animationTrack)
            local animation = animationTrack.Animation
            if not animation then return end

            DataStore.addAnimation(
                animation.Name,
                animation.AnimationId,
                os.time(),
                animationTrack.Length,
                "Action",
                0
            )
        end)
    end

    if player.Character then
        onCharacterAdded(player.Character)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
end

-- Start the GUI and the Logger
UI.createMainInterface()
setupAnimationListener()

-- NOTE:
-- - Filter buttons: only one active at a time (animated). "All" is set active on init.
-- - Cards: click to expand/collapse (debounced). Expanding reveals staggered action buttons.
-- - Global actions are efficient (single applyFilters call).
-- - Visual states: blocked (red tint), excluded (desaturated/hidden by filter logic).
-- - Main GUI resized to 0.55 x 0.75 and centered with (1 - scale)/2 math.
