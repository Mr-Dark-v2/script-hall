--==============================================================================
-- SERVICES
--==============================================================================
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
--==============================================================================
-- REMOTE EVENT REFERENCES
--==============================================================================
local RemotesFolder = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("game")
local Mouse1Remote = RemotesFolder:WaitForChild("action"):WaitForChild("mouse1")
local DeployRemote = RemotesFolder:WaitForChild("deploy")
--==============================================================================
-- CONFIGURATION & STATE VARIABLES
--==============================================================================
local selectedMainPlayer = nil
local farmingDistance = 4
local mainSafeSpotCFrame = CFrame.new(-522, -109, 2)
local originalMainPosition = nil
local playerRole = "None"
local activeFollowConnection = nil
local mainPositionEnforcerActive = false
local config = {
    Colors = {
        GradientColor1 = Color3.fromRGB(50, 54, 58),
        GradientColor2 = Color3.fromRGB(20, 22, 24),
        GradientColor3 = Color3.fromRGB(35, 38, 41),
        Button = Color3.fromRGB(35, 38, 41),
        Text = Color3.fromRGB(230, 230, 230),
        Glow = Color3.fromRGB(255, 255, 255),
        SubtleText = Color3.fromRGB(180, 180, 180),
        ToggleOn = Color3.fromRGB(255, 255, 255),
        ListItemDefault = Color3.fromRGB(45, 48, 51),
        ListItemHover = Color3.fromRGB(60, 63, 66),
    },
    AnimationSpeeds = {
        Intro = 0.8,
        Outro = 0.8,
        Transform = 0.6,
        ButtonHover = 0.2,
        ButtonClick = 0.1,
        GradientPan = 10,
        Toggle = 0.2,
        InfoWindowLine = 0.4,
        InfoWindowExpand = 0.5,
		ContentFade = 0.3
    }
}
--==============================================================================
-- GUI CREATION - Main Frame
--==============================================================================
local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.fromScale(0, 0)
mainFrame.Position = UDim2.fromScale(0.5, 0.5)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = config.Colors.GradientColor2
mainFrame.BorderSizePixel = 0
mainFrame.Draggable = true
mainFrame.Active = true
mainFrame.Visible = false
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui
local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, config.Colors.GradientColor1),
    ColorSequenceKeypoint.new(0.5, config.Colors.GradientColor2),
    ColorSequenceKeypoint.new(1, config.Colors.GradientColor3)
})
uiGradient.Rotation = 45
uiGradient.Parent = mainFrame
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 8)
uiCorner.Parent = mainFrame
--==============================================================================
-- GUI CREATION - Initial Selection UI
--==============================================================================
local playerInfoFrame = Instance.new("Frame")
playerInfoFrame.Name = "PlayerInfoFrame"
playerInfoFrame.Size = UDim2.new(0.8, 0, 0, 50)
playerInfoFrame.Position = UDim2.new(0.5, 0, 0.2, 0)
playerInfoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
playerInfoFrame.BackgroundTransparency = 1
playerInfoFrame.Parent = mainFrame
local pfpImage = Instance.new("ImageLabel")
pfpImage.Name = "PFPImage"
pfpImage.Size = UDim2.fromOffset(50, 50)
pfpImage.Position = UDim2.fromScale(0, 0.5)
pfpImage.AnchorPoint = Vector2.new(0, 0.5)
pfpImage.BackgroundTransparency = 1
pfpImage.ImageTransparency = 1
pfpImage.Parent = playerInfoFrame
local pfpCorner = Instance.new("UICorner")
pfpCorner.Parent = pfpImage
pfpCorner.CornerRadius = UDim.new(0.5, 0)
local nameLabel = Instance.new("TextLabel")
nameLabel.Name = "NameLabel"
nameLabel.Size = UDim2.new(1, -60, 1, 0)
nameLabel.Position = UDim2.new(0, 60, 0.5, 0)
nameLabel.AnchorPoint = Vector2.new(0, 0.5)
nameLabel.BackgroundTransparency = 1
nameLabel.TextColor3 = config.Colors.Text
nameLabel.Font = Enum.Font.SourceSans
nameLabel.Text = "using " .. player.DisplayName .. " as?"
nameLabel.TextSize = 20
nameLabel.TextXAlignment = Enum.TextXAlignment.Left
nameLabel.TextTransparency = 1
nameLabel.Parent = playerInfoFrame
local pfpUrl
local success, content, isReady = pcall(Players.GetUserThumbnailAsync, Players, player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size100x100)
if success and isReady then
    pfpUrl = content
    pfpImage.Image = pfpUrl
else
    warn("Could not fetch player thumbnail.")
end
local function createStyledButton(text, parent)
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(0.4, 0, 0.2, 0)
    button.BackgroundColor3 = config.Colors.Button
    button.TextColor3 = config.Colors.Text
    button.Font = Enum.Font.SourceSans
    button.Text = text
    button.TextSize = 18
    button.TextTransparency = 1
    button.BackgroundTransparency = 1
    button.Parent = parent
    local btnCorner = Instance.new("UICorner")
    btnCorner.Parent = button
    btnCorner.CornerRadius = UDim.new(0, 6)
    local btnStroke = Instance.new("UIStroke")
    btnStroke.Parent = button
    btnStroke.Color = config.Colors.Glow
    btnStroke.Thickness = 0
    btnStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    return button, btnStroke
end
local mainButton, mainStroke = createStyledButton("Main", mainFrame)
mainButton.Position = UDim2.new(0.28, 0, 0.5, 0)
mainButton.AnchorPoint = Vector2.new(0.5, 0.5)
local altButton, altStroke = createStyledButton("Alt", mainFrame)
altButton.Position = UDim2.new(0.72, 0, 0.5, 0)
altButton.AnchorPoint = Vector2.new(0.5, 0.5)
local function createDescriptionLabel(text, parent)
    local descLabel = Instance.new("TextLabel")
    descLabel.Size = UDim2.new(0.4, 0, 0.4, 0)
    descLabel.BackgroundTransparency = 1
    descLabel.TextColor3 = config.Colors.SubtleText
    descLabel.Font = Enum.Font.SourceSansSemibold
    descLabel.Text = text
    descLabel.TextSize = 13
    descLabel.TextWrapped = true
    descLabel.TextXAlignment = Enum.TextXAlignment.Center
    descLabel.TextYAlignment = Enum.TextYAlignment.Top
    descLabel.TextTransparency = 1
    descLabel.Parent = parent
    return descLabel
end
local mainDescription = createDescriptionLabel("the one that gets the money and levels", mainFrame)
mainDescription.Name = "MainDescription"
mainDescription.Position = UDim2.new(0.28, 0, 0.65, 0)
mainDescription.AnchorPoint = Vector2.new(0.5, 0)
local altDescription = createDescriptionLabel("the one that gets farmed (can use more than one)", mainFrame)
altDescription.Name = "AltDescription"
altDescription.Position = UDim2.new(0.72, 0, 0.65, 0)
altDescription.AnchorPoint = Vector2.new(0.5, 0)
local selectionUI = {playerInfoFrame, mainButton, altButton, mainDescription, altDescription}
local currentRoleControls = {}
--==============================================================================
-- INFO PANEL ELEMENTS (FOR MAIN ROLE)
--==============================================================================
local infoFrame = Instance.new("Frame")
infoFrame.Name = "InfoFrame"
infoFrame.AnchorPoint = Vector2.new(0.5, 0.5) 
infoFrame.Position = UDim2.new(-0.25, -4, 0.5, 0) 
infoFrame.Size = UDim2.fromOffset(0, 1) 
infoFrame.BackgroundColor3 = config.Colors.GradientColor2
infoFrame.BackgroundTransparency = 0.1
infoFrame.BorderSizePixel = 0
infoFrame.Visible = false
infoFrame.ZIndex = 3
infoFrame.Parent = mainFrame
local infoCorner = Instance.new("UICorner")
infoCorner.Parent = infoFrame
infoCorner.CornerRadius = UDim.new(0, 8)
local infoGradient = uiGradient:Clone()
infoGradient.Parent = infoFrame
local isInfoPanelVisible = false
local isAnimatingInfoPanel = false
local showInfoButton = Instance.new("TextButton")
showInfoButton.Name = "ShowInfoButton"
showInfoButton.Size = UDim2.new(0.4, 0, 0, 30)
showInfoButton.Position = UDim2.new(0.05, 0, 0.95, 0)
showInfoButton.AnchorPoint = Vector2.new(0, 1)
showInfoButton.BackgroundColor3 = config.Colors.Button
showInfoButton.TextColor3 = config.Colors.Text
showInfoButton.Font = Enum.Font.SourceSans
showInfoButton.Text = "show info"
showInfoButton.TextSize = 14
showInfoButton.Visible = false
showInfoButton.Parent = mainFrame
showInfoButton.ZIndex = 2
local showInfoCorner = Instance.new("UICorner")
showInfoCorner.Parent = showInfoButton
showInfoCorner.CornerRadius = UDim.new(0, 6)
local showInfoStroke = Instance.new("UIStroke")
showInfoStroke.Parent = showInfoButton
showInfoStroke.Color = config.Colors.Glow
showInfoStroke.Thickness = 0
showInfoStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
--==============================================================================
-- PLAYER SELECTION UI (FOR ALT ROLE)
--==============================================================================
local playerSelectionFrame = Instance.new("Frame")
playerSelectionFrame.Name = "PlayerSelectionFrame"
playerSelectionFrame.AnchorPoint = Vector2.new(0.5, 0.5)
playerSelectionFrame.Position = UDim2.new(1.25, 4, 0.5, 0)
playerSelectionFrame.Size = UDim2.fromOffset(0, 1)
playerSelectionFrame.BackgroundColor3 = config.Colors.GradientColor2
playerSelectionFrame.BackgroundTransparency = 0.1
playerSelectionFrame.BorderSizePixel = 0
playerSelectionFrame.Visible = false
playerSelectionFrame.ZIndex = 3
playerSelectionFrame.Parent = mainFrame

local selectionCorner = Instance.new("UICorner")
selectionCorner.Parent = playerSelectionFrame
selectionCorner.CornerRadius = UDim.new(0, 8)

local selectionGradient = uiGradient:Clone()
selectionGradient.Parent = playerSelectionFrame

local playerListScrollingFrame = Instance.new("ScrollingFrame")
playerListScrollingFrame.Name = "PlayerListScrollingFrame"
playerListScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
playerListScrollingFrame.Position = UDim2.fromScale(0.5, 0.5)
playerListScrollingFrame.AnchorPoint = Vector2.new(0.5, 0.5)
playerListScrollingFrame.BackgroundTransparency = 1
playerListScrollingFrame.BorderSizePixel = 0
playerListScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
playerListScrollingFrame.ScrollBarThickness = 4
playerListScrollingFrame.ZIndex = 4
playerListScrollingFrame.Parent = playerSelectionFrame

local uiListLayout = Instance.new("UIListLayout")
uiListLayout.Padding = UDim.new(0, 5)
uiListLayout.FillDirection = Enum.FillDirection.Vertical
uiListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
uiListLayout.Parent = playerListScrollingFrame

local uiPadding = Instance.new("UIPadding")
uiPadding.PaddingTop = UDim.new(0, 8)
uiPadding.PaddingBottom = UDim.new(0, 8)
uiPadding.PaddingLeft = UDim.new(0, 8)
uiPadding.PaddingRight = UDim.new(0, 8)
uiPadding.Parent = playerListScrollingFrame

local isPlayerSelectionVisible = false
local isAnimatingSelection = false

local selectMainButton = Instance.new("TextButton")
selectMainButton.Name = "SelectMainButton"
selectMainButton.Size = UDim2.new(0.4, 0, 0, 30)
selectMainButton.Position = UDim2.new(0.95, 0, 0.95, 0)
selectMainButton.AnchorPoint = Vector2.new(1, 1)
selectMainButton.BackgroundColor3 = config.Colors.Button
selectMainButton.TextColor3 = config.Colors.Text
selectMainButton.Font = Enum.Font.SourceSans
selectMainButton.Text = "select main"
selectMainButton.TextSize = 14
selectMainButton.Visible = false
selectMainButton.Parent = mainFrame
selectMainButton.ZIndex = 2

local selectMainCorner = Instance.new("UICorner")
selectMainCorner.Parent = selectMainButton
selectMainCorner.CornerRadius = UDim.new(0, 6)

local selectMainStroke = Instance.new("UIStroke")
selectMainStroke.Parent = selectMainButton
selectMainStroke.Color = config.Colors.Glow
selectMainStroke.Thickness = 0
selectMainStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
--==============================================================================
-- FARMING LOGIC
--==============================================================================
local isAutoHitting = false
function handleAutoHit(isOn)
	isAutoHitting = isOn
	if isAutoHitting then
		task.spawn(function()
			while isAutoHitting do
				Mouse1Remote:FireServer(true, 1757070337.615337)
				task.wait(0.1)
			end
		end)
	end
end

local isAutoFarmEnabled = false
function handleAutoFarm(isOn)
	isAutoFarmEnabled = isOn

	if activeFollowConnection then
		activeFollowConnection:Disconnect()
		activeFollowConnection = nil
	end
	
	mainPositionEnforcerActive = false

	if isOn then
		DeployRemote:InvokeServer()
		if playerRole == "Main" then
			local character = player.Character
			if not character then return end
			local rootPart = character:FindFirstChild("HumanoidRootPart")
			if not rootPart then return end
			
			originalMainPosition = rootPart.CFrame
			
			character:SetPrimaryPartCFrame(mainSafeSpotCFrame)
			task.wait(0.1)
			rootPart.Anchored = true
			
			mainPositionEnforcerActive = true
			task.spawn(function()
				while mainPositionEnforcerActive do
					task.wait(0.5)
					if not mainPositionEnforcerActive then break end
					
					local char = player.Character
					if char then
						local rp = char:FindFirstChild("HumanoidRootPart")
						if rp then
							local distance = (rp.Position - mainSafeSpotCFrame.Position).Magnitude
							if distance > 20 then
								print("Main character moved! Forcing a state reset.")
								handleAutoFarm(false)
								task.wait(0.1)
								handleAutoFarm(true)
								break 
							end
						end
					end
				end
			end)

		elseif playerRole == "Alt" then
			task.wait(0.2) -- ADJUSTED: Set delay to 0.2
			task.spawn(executeAltCycle)
		end
	else
		if playerRole == "Main" then
			local character = player.Character
			if not character then return end
			local rootPart = character:FindFirstChild("HumanoidRootPart")
			if not rootPart then return end
			
			rootPart.Anchored = false
			
			if originalMainPosition then
				character:SetPrimaryPartCFrame(originalMainPosition)
				originalMainPosition = nil
			end
		end
	end
end

function findMainCharacter()
	if not selectedMainPlayer then
		warn("No main player selected! Please select a main player first.")
		return nil
	end
	return selectedMainPlayer.Character
end

function monitorDamage(character)
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid then return end

	local livingFolder = workspace:WaitForChild("Living", 10)
	if not livingFolder then
		warn("Could not find 'Living' folder in workspace.")
		return
	end

	local characterInLiving = livingFolder:WaitForChild(character.Name, 10)
	if not characterInLiving then
		warn("Character did not appear in the 'Living' folder in time.")
		return
	end

	local healthLabel
	local success = pcall(function()
		healthLabel = characterInLiving:WaitForChild("Torso"):WaitForChild("percentIndicator"):WaitForChild("background"):WaitForChild("health")
	end)

	if not success or not healthLabel then
		warn("Could not find damage indicator label for " .. character.Name)
		return
	end
	
	local initialText = healthLabel.Text

	local damageConnection
	damageConnection = RunService.Heartbeat:Connect(function()
		if not healthLabel or not healthLabel.Parent or not humanoid or humanoid.Health <= 0 then
			damageConnection:Disconnect()
			return
		end
		
		if healthLabel.Text ~= initialText then
			humanoid.Health = 0
			damageConnection:Disconnect()
		end
	end)
end

function executeAltCycle()
	if not isAutoFarmEnabled or playerRole ~= "Alt" then return end
	local altCharacter = player.Character or player.CharacterAdded:Wait()
	
	task.spawn(monitorDamage, altCharacter)

	activeFollowConnection = RunService.Heartbeat:Connect(function()
		local mainCharacter = findMainCharacter()
		if not isAutoFarmEnabled or not mainCharacter or not altCharacter.Parent or altCharacter:FindFirstChildOfClass("Humanoid").Health <= 0 then
			if activeFollowConnection then
				activeFollowConnection:Disconnect()
				activeFollowConnection = nil
			end
			return
		end

		local mainRootPart = mainCharacter:FindFirstChild("HumanoidRootPart")
		if mainRootPart then
			local targetPos = mainRootPart.CFrame.Position + (mainRootPart.CFrame.LookVector * farmingDistance)
			local targetCFrame = CFrame.new(targetPos, mainRootPart.CFrame.Position)
			altCharacter:SetPrimaryPartCFrame(targetCFrame)
		end
	end)
end

player.CharacterAdded:Connect(function(character)
	if playerRole == "Alt" and isAutoFarmEnabled then
		print("Alt has respawned. Starting next cycle.")
		DeployRemote:InvokeServer()
		task.wait(0.2) -- ADJUSTED: Set delay to 0.2
		task.spawn(executeAltCycle)
	elseif playerRole == "Main" and isAutoFarmEnabled then
		print("Main has respawned. Re-deploying and resetting position.")
		DeployRemote:InvokeServer()
		handleAutoFarm(false)
		task.wait(0.1)
		handleAutoFarm(true)
	end
end)
--==============================================================================
-- UI ELEMENT BUILDERS
--==============================================================================
local function createHeader(titleText)
	local header = Instance.new("Frame")
	header.Name = "Header"
	header.Size = UDim2.new(1, -20, 0, 50)
	header.Position = UDim2.new(0.5, 0, 0.1, 0)
	header.AnchorPoint = Vector2.new(0.5, 0.5)
	header.BackgroundTransparency = 1
	header.ZIndex = 2
	local pfp = Instance.new("ImageLabel", header)
	pfp.Size = UDim2.fromOffset(40, 40)
	pfp.Position = UDim2.fromScale(0, 0.5)
	pfp.AnchorPoint = Vector2.new(0, 0.5)
	pfp.BackgroundTransparency = 1
	pfp.Image = pfpUrl
	pfp.ImageTransparency = 1
	local pfpCorner = Instance.new("UICorner", pfp)
	pfpCorner.CornerRadius = UDim.new(0.5, 0)
	local title = Instance.new("TextLabel", header)
	title.Position = UDim2.new(0, 50, 0.5, 0)
	title.AnchorPoint = Vector2.new(0, 0.5)
	title.BackgroundTransparency = 1
	title.Font = Enum.Font.SourceSansBold
	title.TextColor3 = config.Colors.Text
	title.Text = titleText
	title.TextSize = 20
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.TextTransparency = 1
	title.Size = UDim2.new(1, -50, 1, 0)
	return header
end

local function createToggleSwitch(labelText, position, parent, onToggle)
    local isOn = false
    local container = Instance.new("Frame")
	container.Name = labelText .. "Toggle"
    container.Size = UDim2.new(0.9, 0, 0, 30)
    container.Position = position
    container.AnchorPoint = Vector2.new(0.5, 0.5)
    container.BackgroundTransparency = 1
	container.ZIndex = 2
    local label = Instance.new("TextLabel", container)
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.fromScale(0, 0.5)
    label.AnchorPoint = Vector2.new(0, 0.5)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSans
    label.TextColor3 = config.Colors.Text
    label.Text = labelText
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
	label.TextTransparency = 1
    local track = Instance.new("TextButton", container)
    track.Size = UDim2.fromOffset(40, 20)
    track.Position = UDim2.fromScale(1, 0.5)
    track.AnchorPoint = Vector2.new(1, 0.5)
    track.BackgroundColor3 = config.Colors.Button
    track.Text = ""
	track.BackgroundTransparency = 1
    local trackCorner = Instance.new("UICorner", track)
    trackCorner.CornerRadius = UDim.new(0.5, 0)
    local knob = Instance.new("Frame", track)
    knob.Size = UDim2.fromOffset(16, 16)
    knob.AnchorPoint = Vector2.new(0, 0.5)
    knob.Position = UDim2.new(0, 2, 0.5, 0)
    knob.BackgroundColor3 = config.Colors.SubtleText
    knob.BorderSizePixel = 0
	knob.BackgroundTransparency = 1
    local knobCorner = Instance.new("UICorner", knob)
    knobCorner.CornerRadius = UDim.new(0.5, 0)
    track.MouseButton1Click:Connect(function()
        isOn = not isOn
		if onToggle then
			onToggle(isOn)
		end
        local knobPos = isOn and UDim2.new(1, -2, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
        local knobAnchor = isOn and Vector2.new(1, 0.5) or Vector2.new(0, 0.5)
        local trackColor = isOn and config.Colors.ToggleOn or config.Colors.Button
        TweenService:Create(knob, TweenInfo.new(config.AnimationSpeeds.Toggle), {Position = knobPos, AnchorPoint = knobAnchor}):Play()
        TweenService:Create(track, TweenInfo.new(config.AnimationSpeeds.Toggle), {BackgroundColor3 = trackColor}):Play()
        print(labelText .. (isOn and " Enabled" or " Disabled"))
    end)
    return container
end

function createPlayerItem(player)
    local item = Instance.new("ImageButton")
    item.Name = "PlayerItem_" .. player.UserId
    item.Size = UDim2.new(1, 0, 0, 50)
    item.BackgroundColor3 = config.Colors.ListItemDefault
    item.AutoButtonColor = false
    item.ZIndex = 5
	item:SetAttribute("PlayerId", player.UserId)

	local itemCorner = Instance.new("UICorner", item)
	itemCorner.CornerRadius = UDim.new(0, 6)

	local itemStroke = Instance.new("UIStroke", item)
	itemStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	itemStroke.Color = config.Colors.Glow
	itemStroke.Thickness = 1.5
	itemStroke.Transparency = 1

    local pfp = Instance.new("ImageLabel")
    pfp.Size = UDim2.fromOffset(40, 40)
	pfp.Position = UDim2.new(0, 5, 0.5, 0)
    pfp.AnchorPoint = Vector2.new(0, 0.5)
    pfp.BackgroundTransparency = 1
    pfp.ZIndex = 6
    pfp.Image = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=100&height=100&format=png"
    pfp.Parent = item
    
    local pfpCorner = Instance.new("UICorner", pfp)
    pfpCorner.CornerRadius = UDim.new(0.5, 0)
    pfpCorner.Parent = pfp
    
    local displayName = Instance.new("TextLabel")
	displayName.Size = UDim2.new(1, -55, 0.5, 0)
	displayName.Position = UDim2.new(0, 50, 0, 0)
	displayName.AnchorPoint = Vector2.new(0, 0)
    displayName.BackgroundTransparency = 1
    displayName.TextColor3 = config.Colors.Text
    displayName.Font = Enum.Font.SourceSansBold
    displayName.Text = player.DisplayName
    displayName.TextSize = 16
    displayName.TextXAlignment = Enum.TextXAlignment.Left
	displayName.TextYAlignment = Enum.TextYAlignment.Bottom
	displayName.TextTransparency = 0
	displayName.ZIndex = 6
    displayName.Parent = item
    
    local username = Instance.new("TextLabel")
	username.Size = UDim2.new(1, -55, 0.5, 0)
	username.Position = UDim2.new(0, 50, 1, 0)
	username.AnchorPoint = Vector2.new(0, 1)
    username.BackgroundTransparency = 1
    username.TextColor3 = config.Colors.SubtleText
    username.Font = Enum.Font.SourceSans
    username.Text = "@" .. player.Name
    username.TextSize = 13
    username.TextXAlignment = Enum.TextXAlignment.Left
	username.TextYAlignment = Enum.TextYAlignment.Top
	username.TextTransparency = 0
	username.ZIndex = 6
    username.Parent = item
    
    item.MouseEnter:Connect(function()
        local itemPlayer = Players:GetPlayerByUserId(item:GetAttribute("PlayerId"))
        if selectedMainPlayer ~= itemPlayer then
            TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = config.Colors.ListItemHover}):Play()
            TweenService:Create(itemStroke, TweenInfo.new(0.2), {Transparency = 0}):Play()
        end
    end)
    
    item.MouseLeave:Connect(function()
        local itemPlayer = Players:GetPlayerByUserId(item:GetAttribute("PlayerId"))
        if selectedMainPlayer ~= itemPlayer then
            TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = config.Colors.ListItemDefault}):Play()
            TweenService:Create(itemStroke, TweenInfo.new(0.2), {Transparency = 1}):Play()
        end
    end)
    
    item.MouseButton1Click:Connect(function()
        selectedMainPlayer = Players:GetPlayerByUserId(item:GetAttribute("PlayerId"))
        updateSelectionIndicators()
        togglePlayerSelectionWindow()
        if selectedMainPlayer then
            print("Selected main player: " .. selectedMainPlayer.DisplayName .. " (" .. selectedMainPlayer.Name .. ")")
        end
    end)
    
    return item
end

function updateSelectionIndicators()
    for _, item in ipairs(playerListScrollingFrame:GetChildren()) do
        if item:IsA("ImageButton") then
			local playerId = item:GetAttribute("PlayerId")
			if playerId then
				local itemPlayer = Players:GetPlayerByUserId(playerId)
				local itemStroke = item:FindFirstChildOfClass("UIStroke")
				if itemPlayer and itemStroke then
					if itemPlayer == selectedMainPlayer then
						TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = config.Colors.ListItemHover}):Play()
						TweenService:Create(itemStroke, TweenInfo.new(0.2), {Transparency = 0}):Play()
					else
						TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = config.Colors.ListItemDefault}):Play()
						TweenService:Create(itemStroke, TweenInfo.new(0.2), {Transparency = 1}):Play()
					end
				end
			end
        end
    end
end

function populatePlayerList()
    for _, child in ipairs(playerListScrollingFrame:GetChildren()) do
        if not child:IsA("UILayout") then child:Destroy() end
    end
    
	local allPlayers = Players:GetPlayers()
	local filteredPlayers = {}
	for _, p in ipairs(allPlayers) do
		if p ~= player then
			table.insert(filteredPlayers, p)
		end
	end

    table.sort(filteredPlayers, function(a, b) return a.DisplayName:lower() < b.DisplayName:lower() end)
    
    for _, p in ipairs(filteredPlayers) do
        local playerItem = createPlayerItem(p)
        playerItem.Parent = playerListScrollingFrame
    end
    
    task.wait() 
	local layout = playerListScrollingFrame:FindFirstChildOfClass("UIListLayout")
	if layout then
		playerListScrollingFrame.CanvasSize = UDim2.fromOffset(0, layout.AbsoluteContentSize.Y)
	end
	updateSelectionIndicators()
end

function fadeDescendants(parent, targetTransparency, duration)
	local fadeInfo = TweenInfo.new(duration)
	for _, child in ipairs(parent:GetDescendants()) do
		if child:IsA("GuiObject") and not child:IsA("UILayout") then
			if child:IsA("TextLabel") or child:IsA("TextButton") then
				TweenService:Create(child, fadeInfo, {TextTransparency = targetTransparency}):Play()
			end
			if child:IsA("ImageLabel") or child:IsA("ImageButton") then
				if child:IsA("ImageButton") then
					TweenService:Create(child, fadeInfo, {BackgroundTransparency = targetTransparency}):Play()
				else
					TweenService:Create(child, fadeInfo, {ImageTransparency = targetTransparency}):Play()
				end
			end
			if child:IsA("UIStroke") then
				TweenService:Create(child, fadeInfo, {Transparency = targetTransparency}):Play()
			end
		end
	end
end

function togglePlayerSelectionWindow()
    if isAnimatingSelection then return end
    isAnimatingSelection = true
    isPlayerSelectionVisible = not isPlayerSelectionVisible
    
    local lineTweenInfo = TweenInfo.new(config.AnimationSpeeds.InfoWindowLine, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local expandTweenInfo = TweenInfo.new(config.AnimationSpeeds.InfoWindowExpand, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local finalWidth = mainFrame.AbsoluteSize.X * 0.5
    local finalHeight = mainFrame.AbsoluteSize.Y
    
    if isPlayerSelectionVisible then
        populatePlayerList()
		fadeDescendants(playerSelectionFrame, 1, 0)
        playerSelectionFrame.Visible = true
        local lineSize = UDim2.fromOffset(finalWidth, 1)
        local formLine = TweenService:Create(playerSelectionFrame, lineTweenInfo, {Size = lineSize})
        formLine:Play()
        formLine.Completed:Wait()
        local panelSize = UDim2.fromOffset(finalWidth, finalHeight)
        local expandPanel = TweenService:Create(playerSelectionFrame, expandTweenInfo, {Size = panelSize})
        expandPanel:Play()
		fadeDescendants(playerSelectionFrame, 0, config.AnimationSpeeds.ContentFade)
        expandPanel.Completed:Connect(function()
            isAnimatingSelection = false
        end)
    else
		fadeDescendants(playerSelectionFrame, 1, config.AnimationSpeeds.ContentFade)
		task.wait(config.AnimationSpeeds.ContentFade)
        local lineSize = UDim2.fromOffset(playerSelectionFrame.AbsoluteSize.X, 1)
        local shrinkToLine = TweenService:Create(playerSelectionFrame, expandTweenInfo, {Size = lineSize})
        shrinkToLine:Play()
        shrinkToLine.Completed:Wait()
        local dotSize = UDim2.fromOffset(0, 1)
        local shrinkToDot = TweenService:Create(playerSelectionFrame, lineTweenInfo, {Size = dotSize})
        shrinkToDot:Play()
        shrinkToDot.Completed:Connect(function()
            playerSelectionFrame.Visible = false
            isAnimatingSelection = false
        end)
    end
end

function toggleInfoWindow()
    if isAnimatingInfoPanel then return end
    isAnimatingInfoPanel = true
    isInfoPanelVisible = not isInfoPanelVisible
    
    local lineTweenInfo = TweenInfo.new(config.AnimationSpeeds.InfoWindowLine, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local expandTweenInfo = TweenInfo.new(config.AnimationSpeeds.InfoWindowExpand, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local finalWidth = mainFrame.AbsoluteSize.X * 0.5
    local finalHeight = mainFrame.AbsoluteSize.Y
    
    if isInfoPanelVisible then
		fadeDescendants(infoFrame, 1, 0)
        infoFrame.Visible = true
        local lineSize = UDim2.fromOffset(finalWidth, 1)
        local formLine = TweenService:Create(infoFrame, lineTweenInfo, {Size = lineSize})
        formLine:Play()
        formLine.Completed:Wait()
        local panelSize = UDim2.fromOffset(finalWidth, finalHeight)
        local expandPanel = TweenService:Create(infoFrame, expandTweenInfo, {Size = panelSize})
        expandPanel:Play()
		fadeDescendants(infoFrame, 0, config.AnimationSpeeds.ContentFade)
        expandPanel.Completed:Connect(function()
            isAnimatingInfoPanel = false
        end)
    else
		fadeDescendants(infoFrame, 1, config.AnimationSpeeds.ContentFade)
		task.wait(config.AnimationSpeeds.ContentFade)
        local lineSize = UDim2.fromOffset(infoFrame.AbsoluteSize.X, 1)
        local shrinkToLine = TweenService:Create(infoFrame, expandTweenInfo, {Size = lineSize})
        shrinkToLine:Play()
        shrinkToLine.Completed:Wait()
        local dotSize = UDim2.fromOffset(0, 1)
        local shrinkToDot = TweenService:Create(infoFrame, lineTweenInfo, {Size = dotSize})
        shrinkToDot:Play()
        shrinkToDot.Completed:Connect(function()
            infoFrame.Visible = false
            isAnimatingInfoPanel = false
        end)
    end
end
--==============================================================================
-- ANIMATIONS
--==============================================================================
local function playIntro()
    mainFrame.Visible = true
    local introTweenInfo = TweenInfo.new(config.AnimationSpeeds.Intro, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local frameAppear = TweenService:Create(mainFrame, introTweenInfo, {Size = UDim2.fromScale(0.35, 0.4), BackgroundTransparency = 0.1})
    frameAppear:Play()
    frameAppear.Completed:Wait()
    local fadeInfo = TweenInfo.new(config.AnimationSpeeds.Intro / 2, Enum.EasingStyle.Linear)
    TweenService:Create(pfpImage, fadeInfo, {ImageTransparency = 0}):Play()
    TweenService:Create(nameLabel, fadeInfo, {TextTransparency = 0}):Play()
    task.wait(0.2)
    TweenService:Create(mainButton, fadeInfo, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    TweenService:Create(altButton, fadeInfo, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    task.wait(0.2)
    TweenService:Create(mainDescription, fadeInfo, {TextTransparency = 0}):Play()
    TweenService:Create(altDescription, fadeInfo, {TextTransparency = 0}):Play()
end
local function playOutro()
    local outroTweenInfo = TweenInfo.new(config.AnimationSpeeds.Outro, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
    for _, element in ipairs(mainFrame:GetChildren()) do
        for _, child in ipairs(element:GetDescendants()) do
            pcall(function() if child:IsA("TextLabel") or child:IsA("TextButton") then TweenService:Create(child, outroTweenInfo, {TextTransparency = 1}):Play() end end)
            pcall(function() if child:IsA("ImageLabel") or child:IsA("ImageButton") then TweenService:Create(child, outroTweenInfo, {ImageTransparency = 1, BackgroundTransparency = 1}):Play() end end)
            pcall(function() if child:IsA("Frame") then TweenService:Create(child, outroTweenInfo, {BackgroundTransparency = 1}):Play() end end)
        end
    end
    wait(config.AnimationSpeeds.Outro / 2)
    local frameDisappear = TweenService:Create(mainFrame, outroTweenInfo, {Size = UDim2.fromScale(0, 0), BackgroundTransparency = 1})
    frameDisappear:Play()
    frameDisappear.Completed:Wait()
    screenGui:Destroy()
end
function transitionToRoleUI(role)
    local fadeOutInfo = TweenInfo.new(config.AnimationSpeeds.Transform / 2)
    local transformInfo = TweenInfo.new(config.AnimationSpeeds.Transform, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    TweenService:Create(playerInfoFrame, fadeOutInfo, {BackgroundTransparency = 1}):Play()
    TweenService:Create(pfpImage, fadeOutInfo, {ImageTransparency = 1}):Play()
    TweenService:Create(nameLabel, fadeOutInfo, {TextTransparency = 1}):Play()
    TweenService:Create(mainButton, fadeOutInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
    TweenService:Create(altButton, fadeOutInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
    TweenService:Create(mainDescription, fadeOutInfo, {TextTransparency = 1}):Play()
    TweenService:Create(altDescription, fadeOutInfo, {TextTransparency = 1}):Play()
    
    wait(fadeOutInfo.Time + 0.1)
    
    for _, element in ipairs(selectionUI) do element:Destroy() end
    mainFrame.ClipsDescendants = false
    local newSize = UDim2.fromScale(0.25, 0.5)
    TweenService:Create(mainFrame, transformInfo, {Size = newSize}):Play()
    
    for _, control in ipairs(currentRoleControls) do control:Destroy() end
    table.clear(currentRoleControls)
    
    if role == "Main" then
        table.insert(currentRoleControls, createHeader(player.DisplayName .. "'s settings"))
        table.insert(currentRoleControls, createToggleSwitch("Auto Hit", UDim2.fromScale(0.5, 0.35), mainFrame, handleAutoHit))
        table.insert(currentRoleControls, createToggleSwitch("Auto Farm", UDim2.fromScale(0.5, 0.48), mainFrame, handleAutoFarm))
    elseif role == "Alt" then
        table.insert(currentRoleControls, createHeader(player.DisplayName .. "'s Alt controls"))
        table.insert(currentRoleControls, createToggleSwitch("Auto Farm", UDim2.fromScale(0.5, 0.48), mainFrame, handleAutoFarm))
    end
    
    for _, control in ipairs(currentRoleControls) do control.Parent = mainFrame end
    
    local fadeInInfo = TweenInfo.new(config.AnimationSpeeds.Transform / 2)
    
    for _, control in ipairs(currentRoleControls) do
        control.Visible = true
        wait(0.1)
        for _, child in ipairs(control:GetDescendants()) do
            if child:IsA("TextLabel") then
                TweenService:Create(child, fadeInInfo, {TextTransparency = 0}):Play()
            elseif child:IsA("ImageLabel") then
                 TweenService:Create(child, fadeInInfo, {ImageTransparency = 0}):Play()
            elseif child:IsA("Frame") or child:IsA("TextButton") or child:IsA("ImageButton") then
                TweenService:Create(child, fadeInInfo, {BackgroundTransparency = 0}):Play()
            end
        end
    end
    
    if role == "Main" then
        showInfoButton.Visible = true
        TweenService:Create(showInfoButton, fadeInInfo, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    elseif role == "Alt" then
        selectMainButton.Visible = true
        TweenService:Create(selectMainButton, fadeInInfo, {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    end
end
local function setupButtonEvents(button, stroke, onClickFunction)
    local originalSize = button.Size
    local hoverSize = UDim2.new(originalSize.X.Scale * 1.1, originalSize.X.Offset * 1.1, originalSize.Y.Scale * 1.1, originalSize.Y.Offset * 1.1)
    local hoverTweenInfo = TweenInfo.new(config.AnimationSpeeds.ButtonHover, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local clickTweenInfo = TweenInfo.new(config.AnimationSpeeds.ButtonClick, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local hoverStartTime = 0
    button.MouseEnter:Connect(function()
        hoverStartTime = tick()
        TweenService:Create(button, hoverTweenInfo, {Size = hoverSize}):Play()
        TweenService:Create(stroke, hoverTweenInfo, {Thickness = 1.5}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, hoverTweenInfo, {Size = originalSize}):Play()
        TweenService:Create(stroke, hoverTweenInfo, {Thickness = 0}):Play()
    end)
    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, clickTweenInfo, {Size = originalSize}):Play()
    end)
    button.MouseButton1Click:Connect(function()
        local timeSinceHover = tick() - hoverStartTime
        local hoverDuration = config.AnimationSpeeds.ButtonHover
        if timeSinceHover < hoverDuration then
            task.wait(hoverDuration - timeSinceHover)
        end
        if onClickFunction then onClickFunction() end
    end)
end
local function animateGradient()
    local tweenInfo = TweenInfo.new(config.AnimationSpeeds.GradientPan, Enum.EasingStyle.Linear)
    local forwardTween = TweenService:Create(uiGradient, tweenInfo, {Offset = Vector2.new(1, 0)})
    local backwardTween = TweenService:Create(uiGradient, tweenInfo, {Offset = Vector2.new(-1, 0)})
    forwardTween.Completed:Connect(function() if screenGui and screenGui.Parent then backwardTween:Play() end end)
    backwardTween.Completed:Connect(function() if screenGui and screenGui.Parent then forwardTween:Play() end end)
    forwardTween:Play()
end
setupButtonEvents(mainButton, mainStroke, function()
    print("Main role selected")
    playerRole = "Main"
    mainButton.AutoButtonColor, altButton.AutoButtonColor = false, false
    transitionToRoleUI("Main")
end)
setupButtonEvents(altButton, altStroke, function()
    print("Alt role selected")
    playerRole = "Alt"
    mainButton.AutoButtonColor, altButton.AutoButtonColor = false, false
    transitionToRoleUI("Alt")
end)
setupButtonEvents(showInfoButton, showInfoStroke, toggleInfoWindow)
setupButtonEvents(selectMainButton, selectMainStroke, togglePlayerSelectionWindow)
--==============================================================================
-- SCRIPT EXECUTION
--==============================================================================
wait(1)
playIntro()
animateGradient()
