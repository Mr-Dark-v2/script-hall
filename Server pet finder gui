-- [[
--   The Mist Hub - Server Pet Finder Edition
--   iOS-Inspired with Advanced Physics & Animations
--   Transformed from Animation Logger on August 20, 2025
--   Features: Spring physics, magnetic effects, liquid morphing, parallax depth, auto-scaling UI
--   Base file: Animation logger (2).txt → Repurposed with server pet finder.txt logic
-- ]]

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")

-- Advanced Animation System
local AnimationEngine = {}
local SpringPhysics = {
    damping = 0.75,
    stiffness = 0.4,
    tension = 300,
    friction = 30
}

-- Enhanced Easing Functions
local EasingFunctions = {
    spring = TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 0, false, 0),
    elastic = TweenInfo.new(0.8, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0),
    bounce = TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out, 0, false, 0),
    smooth = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out, 0, false, 0),
    liquid = TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, 0),
    magnetic = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0)
}

-- iOS-inspired Color Palette
local Colors = {
    background = Color3.fromRGB(0, 0, 0),
    surface = Color3.fromRGB(28, 28, 30),
    surfaceElevated = Color3.fromRGB(44, 44, 46),
    surfaceSelected = Color3.fromRGB(58, 58, 60),
    textPrimary = Color3.fromRGB(255, 255, 255),
    textSecondary = Color3.fromRGB(142, 142, 147),
    textTertiary = Color3.fromRGB(99, 99, 102),
    accent = Color3.fromRGB(0, 255, 255),
    accentDark = Color3.fromRGB(0, 200, 200),
    success = Color3.fromRGB(52, 199, 89),
    warning = Color3.fromRGB(255, 159, 10),
    error = Color3.fromRGB(255, 69, 58),
    separator = Color3.fromRGB(56, 56, 58),
    glass = Color3.fromRGB(255, 255, 255)
}

-- Global State Management
local AppState = {
    initialized = false,
    currentTab = "pets",
    isAnimating = false,
    isCardAnimating = false,
    mousePosition = Vector2.new(0, 0),
    searchQuery = "",
    filterMode = "all",
    activeFilterButton = nil,
    selectedCard = nil
}

-- Data Storage (Repurposed for Pets)
local DataStore = {
    pets = {},          -- {name, rarity, money, mutation, placeId, jobId, ownerName}
    filtered = {},
    settings = {
        enablePhysics = true,
        enableMagneticEffects = true
    }
}

-- Pet Finder Module (Implanted from server pet finder.txt)
local PetFinder = {}
PetFinder.SERVER_URL = "https://c0b380c0-e581-4a2d-b662-3b6458672e31-00-2nqz0i9difaqd.spock.replit.dev"

function PetFinder.teleportToServer(placeId, jobId)
    local player = Players.LocalPlayer
    if placeId and jobId then
        TeleportService:TeleportToPlaceInstance(placeId, jobId, player)
    else
        warn("Missing placeId or jobId")
    end
end

function PetFinder.fetchData()
    local success, response = pcall(function()
        return game:HttpGet(PetFinder.SERVER_URL .. "/read")
    end)
    if not success then
        warn("Fetch failed:", response)
        return
    end

    local ok, data = pcall(function()
        return HttpService:JSONDecode(response)
    end)
    if not ok or type(data) ~= "table" then
        warn("Decode failed")
        return
    end

    local pets = {}
    for _, msg in ipairs(data) do
        local ok2, playerData = pcall(function()
            return HttpService:JSONDecode(msg)
        end)
        if ok2 and type(playerData) == "table" and playerData.pets then
            for _, petData in ipairs(playerData.pets) do
                table.insert(pets, {
                    name = petData.name or "Unknown",
                    rarity = petData.rarity or "?",
                    money = petData.money or "?",
                    mutation = petData.mutation or "None",
                    placeId = playerData.placeId,
                    jobId = playerData.jobId,
                    ownerName = playerData.name or "Unknown Player"
                })
            end
        end
    end

    DataStore.pets = pets
    DataStore.applyFilters()
end

function PetFinder.pollData()
    while true do
        PetFinder.fetchData()
        task.wait(1)
    end
end

-- UI References
local UI = {
    filterButtons = {}
}

-- Advanced Animation Engine (Unchanged - Preserved for Visual Polish)
function AnimationEngine.springTo(object, properties, config)
    config = config or {}
    local duration = config.duration or 0.6
    local style = config.elastic and Enum.EasingStyle.Elastic or Enum.EasingStyle.Back
    local direction = config.direction or Enum.EasingDirection.Out
    local tween = TweenService:Create(object,
        TweenInfo.new(duration, style, direction), properties)
    if config.onComplete then
        tween.Completed:Connect(config.onComplete)
    end
    tween:Play()
    return tween
end

function AnimationEngine.liquidMorph(object, targetProps, duration)
    duration = duration or 0.4
    local t = TweenService:Create(object,
        TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
        targetProps)
    return t
end

function AnimationEngine.magneticHover(object, attractionStrength)
    attractionStrength = attractionStrength or 10
    local connection
    local originalPos = object.Position
    object.MouseEnter:Connect(function()
        connection = RunService.Heartbeat:Connect(function()
            if AppState.isAnimating then return end
            local mousePos = UserInputService:GetMouseLocation()
            local objCenter = object.AbsolutePosition + object.AbsoluteSize/2
            local distance = (Vector2.new(mousePos.X, mousePos.Y) - objCenter).Magnitude
            if distance < 100 then
                local attraction = math.max(0, (100 - distance) / 100) * attractionStrength
                local direction = (Vector2.new(mousePos.X, mousePos.Y) - objCenter).Unit
                local offset = direction * attraction
                AnimationEngine.springTo(object, {
                    Position = UDim2.new(originalPos.X.Scale, originalPos.X.Offset + offset.X,
                                         originalPos.Y.Scale, originalPos.Y.Offset + offset.Y)
                }, {duration = 0.1})
            end
        end)
    end)
    object.MouseLeave:Connect(function()
        if connection then connection:Disconnect() end
        AnimationEngine.springTo(object, {Position = originalPos}, {duration = 0.3})
    end)
end

function AnimationEngine.rippleEffect(parent, clickPos)
    local ripple = Instance.new("Frame")
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Position = UDim2.new(0, clickPos.X - parent.AbsolutePosition.X, 0, clickPos.Y - parent.AbsolutePosition.Y)
    ripple.BackgroundColor3 = Colors.accent
    ripple.BackgroundTransparency = 0.3
    ripple.BorderSizePixel = 0
    ripple.ZIndex = parent.ZIndex + 10
    ripple.Parent = parent
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = ripple
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    local maxSize = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    local expandTween = TweenService:Create(ripple, EasingFunctions.smooth, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    })
    expandTween:Play()
    expandTween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

function AnimationEngine.breathingAnimation(object, intensity)
    intensity = intensity or 0.05
    local originalSize = object.Size
    local breathe = TweenService:Create(object,
        TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Size = UDim2.new(originalSize.X.Scale + intensity, originalSize.X.Offset,
                         originalSize.Y.Scale + intensity, originalSize.Y.Offset)
    })
    breathe:Play()
    return breathe
end

-- UI Component Factories (Unchanged - Preserved)
function UI.createCard(parent, size, position, config)
    config = config or {}
    local card = Instance.new("Frame")
    card.Size = size
    card.Position = position
    card.BackgroundColor3 = config.color or Colors.surface
    card.BorderSizePixel = 0
    card.ClipsDescendants = true
    card.Parent = parent
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, config.cornerRadius or 12)
    corner.Parent = card

    local shadow = Instance.new("Frame")
    shadow.Size = UDim2.new(1, 6, 1, 6)
    shadow.Position = UDim2.new(0, -3, 0, -3)
    shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    shadow.BackgroundTransparency = config.shadowOpacity or 0.8
    shadow.ZIndex = card.ZIndex - 1
    shadow.Parent = card.Parent
    local shadowCorner = Instance.new("UICorner")
    shadowCorner.CornerRadius = UDim.new(0, (config.cornerRadius or 12) + 2)
    shadowCorner.Parent = shadow

    if config.magnetic and DataStore.settings.enableMagneticEffects then
        AnimationEngine.magneticHover(card, config.magneticStrength or 5)
    end

    if config.glowOnHover then
        local glow = Instance.new("UIStroke")
        glow.Color = Colors.accent
        glow.Thickness = 0
        glow.Transparency = 1
        glow.Parent = card
        card.MouseEnter:Connect(function()
            AnimationEngine.springTo(glow, {Thickness = 2, Transparency = 0.3})
        end)
        card.MouseLeave:Connect(function()
            AnimationEngine.springTo(glow, {Thickness = 0, Transparency = 1})
        end)
    end

    return card, shadow
end

function UI.createButton(parent, text, size, position, style, config)
    style = style or "secondary"
    config = config or {}
    local button = Instance.new("TextButton")
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = style == "primary" and Colors.accent or Colors.surfaceElevated
    button.Text = text
    button.TextColor3 = style == "primary" and Colors.background or Colors.textPrimary
    button.TextSize = config.textSize or 16
    button.Font = config.font or Enum.Font.GothamMedium
    button.BorderSizePixel = 0
    button.ClipsDescendants = true
    button.AutoButtonColor = false
    button.Parent = parent
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, config.cornerRadius or 10)
    corner.Parent = button

    local originalSize = size
    local isPressed = false

    button.MouseEnter:Connect(function()
        if not isPressed then
            AnimationEngine.springTo(button, {
                BackgroundColor3 = style == "primary" and Colors.accentDark or Colors.surfaceSelected
            }, {duration = 0.2})
        end
    end)
    button.MouseLeave:Connect(function()
        if not isPressed then
            AnimationEngine.springTo(button, {
                BackgroundColor3 = style == "primary" and Colors.accent or Colors.surfaceElevated
            }, {duration = 0.2})
        end
    end)

    button.MouseButton1Down:Connect(function()
        isPressed = true
        local mousePos = UserInputService:GetMouseLocation()
        AnimationEngine.rippleEffect(button, Vector2.new(mousePos.X, mousePos.Y))
        AnimationEngine.springTo(button, {
            Size = UDim2.new(originalSize.X.Scale * 0.95, originalSize.X.Offset,
                             originalSize.Y.Scale * 0.95, originalSize.Y.Offset),
            BackgroundColor3 = style == "primary" and Color3.fromRGB(0, 180, 180) or Colors.surface
        }, {duration = 0.1})
    end)
    button.MouseButton1Up:Connect(function()
        isPressed = false
        AnimationEngine.springTo(button, {
            Size = originalSize,
            BackgroundColor3 = style == "primary" and Colors.accent or Colors.surfaceElevated
        }, {duration = 0.2, elastic = true})
    end)

    return button
end

function UI.createLabel(parent, text, size, position, textSize, style, config)
    style = style or "primary"
    config = config or {}
    local label = Instance.new("TextLabel")
    label.Size = size
    label.Position = position
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = style == "primary" and Colors.textPrimary or
                      style == "secondary" and Colors.textSecondary or Colors.textTertiary
    label.TextSize = textSize or 16
    label.Font = config.font or (style == "title" and Enum.Font.GothamBold or Enum.Font.Gotham)
    label.TextXAlignment = config.alignment or Enum.TextXAlignment.Left
    label.TextYAlignment = Enum.TextYAlignment.Center
    label.TextWrapped = config.wrapped or false
    label.Parent = parent

    if config.typewriter then
        local originalText = text
        label.Text = ""
        for i = 1, #originalText do
            task.wait(0.03)
            label.Text = originalText:sub(1, i)
        end
    end

    return label
end

-- DATA MANAGEMENT (Updated for Pets)
function DataStore.applyFilters()
    DataStore.filtered = {}
    for _, pet in ipairs(DataStore.pets) do
        local query = AppState.searchQuery:lower()
        local matchesSearch = query == "" or
                             pet.name:lower():find(query) or
                             pet.ownerName:lower():find(query)

        local matchesFilter = true
        if AppState.filterMode == "common" then
            matchesFilter = pet.rarity == "Common"
        elseif AppState.filterMode == "rare" then
            matchesFilter = pet.rarity == "Rare" or pet.rarity == "Legendary"
        end

        if matchesSearch and matchesFilter then
            table.insert(DataStore.filtered, pet)
        end
    end

    if UI.refreshPetList then
        UI.refreshPetList()
    end
end

-- UI: Build the Pet List with Interactive Cards
function UI.refreshPetList()
    if not UI.petList then return end

    -- Clear old
    for _, child in ipairs(UI.petList:GetChildren()) do
        if child:IsA("Frame") or child:IsA("TextButton") then
            child:Destroy()
        end
    end

    UI.petList.CanvasSize = UDim2.new(0, 0, 0, #DataStore.filtered * 90)

    for i, petData in ipairs(DataStore.filtered) do
        local card = UI.createCard(UI.petList,
            UDim2.new(1, 0, 0, 80),
            UDim2.new(0, 0, 0, (i-1) * 90),
            {color = Colors.surfaceElevated, cornerRadius = 10, magnetic = true}
        )

        -- Pet Info Labels
        local nameLbl = UI.createLabel(card, "🐾 " .. petData.name, UDim2.new(0.7, -20, 0, 25), UDim2.new(0, 15, 0, 5), 16, "primary")
        local rarityLbl = UI.createLabel(card, "⭐ " .. petData.rarity, UDim2.new(0.7, -20, 0, 20), UDim2.new(0, 15, 0, 25), 12, "secondary")
        local moneyLbl = UI.createLabel(card, "💰 " .. tostring(petData.money) .. "/s", UDim2.new(0.3, 0, 0, 20), UDim2.new(0.7, 0, 0, 5), 12, "tertiary")
        local mutationLbl = UI.createLabel(card, "🧬 " .. petData.mutation, UDim2.new(0.3, 0, 0, 20), UDim2.new(0.7, 0, 0, 25), 12, "tertiary")

        -- Teleport Button
        local teleportBtn = UI.createButton(card, "Teleport", UDim2.new(0.25, -10, 0, 30), UDim2.new(0.75, 5, 0, 25), "primary", {cornerRadius = 8, textSize = 14})
        teleportBtn.MouseButton1Click:Connect(function()
            PetFinder.teleportToServer(petData.placeId, petData.jobId)
        end)

        -- Disable button if missing server info
        if not petData.placeId or not petData.jobId then
            teleportBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            teleportBtn.TextColor3 = Color3.fromRGB(180, 180, 180)
            teleportBtn.Active = false
        end
    end

    if UI.statsLabel then
        UI.statsLabel.Text = string.format("%d pets found on server", #DataStore.filtered)
    end
end

function UI.switchTab(tabName)
    AppState.currentTab = tabName
    UI.petsTab.Visible = (tabName == "pets")
    UI.settingsTab.Visible = (tabName == "settings")
    UI.analyticsTab.Visible = (tabName == "analytics")
end

-- Main UI Creation (Updated Tab Names)
function UI.createMainInterface()
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui", 10)
    if not playerGui then return end

    local gui = Instance.new("ScreenGui")
    gui.Name = "MistHubPetFinder"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.IgnoreGuiInset = true
    gui.Parent = playerGui

    local mainFrame = Instance.new("CanvasGroup")
    mainFrame.Size = UDim2.new(0.55, 0, 0.75, 0)
    mainFrame.Position = UDim2.new(0.225, 0, 0.125, 0)
    mainFrame.BackgroundColor3 = Colors.background
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.GroupTransparency = 0
    mainFrame.Parent = gui

    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 20)
    mainCorner.Parent = mainFrame

    -- Particles (Unchanged)
    local particleContainer = Instance.new("Frame")
    particleContainer.Size = UDim2.new(1, 0, 1, 0)
    particleContainer.BackgroundTransparency = 1
    particleContainer.ClipsDescendants = true
    particleContainer.Parent = mainFrame
    for i = 1, 8 do
        local particle = Instance.new("Frame")
        particle.Size = UDim2.new(0, math.random(2, 4), 0, math.random(2, 4))
        particle.Position = UDim2.new(math.random(0, 100)/100, 0, math.random(0, 100)/100, 0)
        particle.BackgroundColor3 = Colors.accent
        particle.BackgroundTransparency = 0.7
        particle.BorderSizePixel = 0
        particle.Parent = particleContainer
        local particleCorner = Instance.new("UICorner")
        particleCorner.CornerRadius = UDim.new(1, 0)
        particleCorner.Parent = particle
        local floatTween = TweenService:Create(particle,
            TweenInfo.new(math.random(3, 8), Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
            Position = UDim2.new(math.random(0, 100)/100, 0, math.random(0, 100)/100, 0),
            BackgroundTransparency = math.random(3, 9)/10
        })
        floatTween:Play()
    end

    -- Header
    local header = UI.createCard(mainFrame, UDim2.new(1, 0, 0, 120), UDim2.new(0, 0, 0, 0), {
        color = Colors.surface,
        cornerRadius = 20,
        glowOnHover = false
    })

    local logo = UI.createLabel(header, "MIST HUB", UDim2.new(0, 300, 0, 40), UDim2.new(0, 25, 0, 20), 28, "title")
    logo.TextColor3 = Colors.accent
    AnimationEngine.breathingAnimation(logo, 0.02)

    local closeBtn = UI.createButton(header, "✖", UDim2.new(0, 50, 0, 50), UDim2.new(1, -65, 0, 15), "secondary", {
        cornerRadius = 25
    })
    closeBtn.MouseButton1Click:Connect(function()
        AppState.isAnimating = true
        AnimationEngine.springTo(mainFrame, {
            Position = UDim2.new(0.225, 0, -1, 0),
            GroupTransparency = 1
        }, {
            duration = 0.5,
            onComplete = function()
                gui:Destroy()
            end
        })
    end)

    -- Tabs (Updated to "Pets")
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(0.6, 0, 0, 45)
    tabContainer.Position = UDim2.new(0.2, 0, 0, 70)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = header

    local tabs = {"Pets", "Settings", "Analytics"}
    local tabButtons = {}

    local tabIndicator = Instance.new("Frame")
    tabIndicator.Size = UDim2.new(1/#tabs, -4, 0, 3)
    tabIndicator.Position = UDim2.new(0, 2, 1, -5)
    tabIndicator.BackgroundColor3 = Colors.accent
    tabIndicator.BorderSizePixel = 0
    tabIndicator.Parent = tabContainer

    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 2)
    indicatorCorner.Parent = tabIndicator

    for i, tabName in ipairs(tabs) do
        local tabButton = UI.createButton(tabContainer, tabName,
            UDim2.new(1/#tabs, -2, 1, -8),
            UDim2.new((i-1)/#tabs, 1, 0, 0), "secondary", {
            cornerRadius = 8,
            textSize = 15
        })
        tabButton.MouseButton1Click:Connect(function()
            if AppState.currentTab == tabName:lower() then return end
            AnimationEngine.liquidMorph(tabIndicator, {
                Position = UDim2.new((i-1)/#tabs, 2, 1, -5)
            }, 0.3):Play()
            for j, btn in ipairs(tabButtons) do
                local isSelected = (j == i)
                AnimationEngine.springTo(btn, {
                    TextColor3 = isSelected and Colors.accent or Colors.textSecondary
                }, {duration = 0.3})
            end
            UI.switchTab(tabName:lower())
        end)
        table.insert(tabButtons, tabButton)
    end

    tabButtons[1].TextColor3 = Colors.accent

    UI.statsLabel = UI.createLabel(header, "0 pets found on server",
        UDim2.new(0, 400, 0, 20), UDim2.new(0.5, -200, 0, 25), 14, "secondary", {alignment = Enum.TextXAlignment.Center})

    -- Content Area
    local contentArea = Instance.new("Frame")
    contentArea.Size = UDim2.new(1, 0, 1, -120)
    contentArea.Position = UDim2.new(0, 0, 0, 120)
    contentArea.BackgroundTransparency = 1
    contentArea.Parent = mainFrame

    UI.petsTab = Instance.new("Frame")
    UI.petsTab.Size = UDim2.new(1, 0, 1, 0)
    UI.petsTab.BackgroundTransparency = 1
    UI.petsTab.Visible = true
    UI.petsTab.Parent = contentArea

    UI.settingsTab = Instance.new("Frame")
    UI.settingsTab.Size = UDim2.new(1, 0, 1, 0)
    UI.settingsTab.BackgroundTransparency = 1
    UI.settingsTab.Visible = false
    UI.settingsTab.Parent = contentArea

    UI.analyticsTab = Instance.new("Frame")
    UI.analyticsTab.Size = UDim2.new(1, 0, 1, 0)
    UI.analyticsTab.BackgroundTransparency = 1
    UI.analyticsTab.Visible = false
    UI.analyticsTab.Parent = contentArea

    UI.setupPetsTab()
    UI.setupSettingsTab()
    UI.setupAnalyticsTab()

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            AppState.mousePosition = Vector2.new(input.Position.X, input.Position.Y)
        end
    end)

    -- Entrance animation
    mainFrame.Position = UDim2.new(0.225, 0, -1, 0)
    mainFrame.GroupTransparency = 1
    task.wait(0.1)
    AnimationEngine.springTo(mainFrame, {
        Position = UDim2.new(0.225, 0, 0.125, 0),
        GroupTransparency = 0
    }, {duration = 0.8, elastic = true})

    AppState.initialized = true
end

-- TAB SETUP: PETS (Formerly Animations)
function UI.setupPetsTab()
    local searchContainer = UI.createCard(UI.petsTab,
        UDim2.new(1, -20, 0, 50), UDim2.new(0, 10, 0, 10), {
        color = Colors.surfaceElevated,
        cornerRadius = 15,
        magnetic = true,
        magneticStrength = 3
    })

    -- Unified Button Container with Auto-Scaling
    local unifiedContainer = Instance.new("Frame")
    unifiedContainer.Size = UDim2.new(1, -20, 1, -10)
    unifiedContainer.Position = UDim2.new(0, 10, 0, 5)
    unifiedContainer.BackgroundTransparency = 1
    unifiedContainer.Parent = searchContainer

    local listLayout = Instance.new("UIListLayout")
    listLayout.FillDirection = Enum.FillDirection.Horizontal
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    listLayout.Padding = UDim.new(0, 8)
    listLayout.Parent = unifiedContainer

    -- Search Box (Takes remaining space)
    UI.searchBox = Instance.new("TextBox")
    UI.searchBox.Size = UDim2.new(1, 0, 1, -10) -- Will be adjusted dynamically
    UI.searchBox.Position = UDim2.new(0, 0, 0, 5)
    UI.searchBox.BackgroundTransparency = 1
    UI.searchBox.Text = ""
    UI.searchBox.PlaceholderText = "Search pets by name..."
    UI.searchBox.TextColor3 = Colors.textPrimary
    UI.searchBox.PlaceholderColor3 = Colors.textTertiary
    UI.searchBox.TextSize = 16
    UI.searchBox.Font = Enum.Font.Gotham
    UI.searchBox.ClearTextOnFocus = false
    UI.searchBox.Parent = unifiedContainer

    -- Filter Buttons
    local filters = {
        {name = "All", mode = "all"},
        {name = "Common", mode = "common"},
        {name = "Rare", mode = "rare"}
    }

    local function activateFilter(newBtn, mode)
        if AppState.activeFilterButton == newBtn then return end
        if AppState.activeFilterButton then
            AnimationEngine.springTo(AppState.activeFilterButton, {
                BackgroundColor3 = Colors.surfaceElevated,
                TextColor3 = Colors.textPrimary,
                Size = UDim2.new(0, 65, 0, 30)
            }, {duration = 0.2})
        end
        AnimationEngine.springTo(newBtn, {
            BackgroundColor3 = Colors.accent,
            TextColor3 = Colors.background,
            Size = UDim2.new(0, 75, 0, 32)
        }, {duration = 0.2})
        AppState.activeFilterButton = newBtn
        AppState.filterMode = mode
        DataStore.applyFilters()
    end

    for i, filter in ipairs(filters) do
        local filterBtn = UI.createButton(unifiedContainer, filter.name,
            UDim2.new(0, 65, 0, 30), UDim2.new(), "secondary", {
            cornerRadius = 15,
            textSize = 12
        })
        filterBtn.LayoutOrder = i + 100 -- After search box
        UI.filterButtons[filter.mode] = filterBtn
        filterBtn.MouseButton1Click:Connect(function()
            activateFilter(filterBtn, filter.mode)
        end)
    end

    -- Global Actions
    local refreshBtn = UI.createButton(unifiedContainer, "Refresh",
        UDim2.new(0, 80, 0, 30), UDim2.new(), "secondary", {cornerRadius = 12, textSize = 12})
    refreshBtn.LayoutOrder = 200
    refreshBtn.MouseButton1Click:Connect(function()
        PetFinder.fetchData()
    end)

    local showAllBtn = UI.createButton(unifiedContainer, "Show All",
        UDim2.new(0, 90, 0, 30), UDim2.new(), "secondary", {cornerRadius = 12, textSize = 12})
    showAllBtn.LayoutOrder = 201
    showAllBtn.MouseButton1Click:Connect(function()
        AppState.searchQuery = ""
        UI.searchBox.Text = ""
        AppState.filterMode = "all"
        if AppState.activeFilterButton then
            AnimationEngine.springTo(AppState.activeFilterButton, {
                BackgroundColor3 = Colors.surfaceElevated,
                TextColor3 = Colors.textPrimary,
                Size = UDim2.new(0, 65, 0, 30)
            }, {duration = 0.2})
        end
        if UI.filterButtons["all"] then
            activateFilter(UI.filterButtons["all"], "all")
        end
    end)

    -- Adjust search box width dynamically after buttons are created
    task.defer(function()
        local totalButtonWidth = 0
        for _, child in ipairs(unifiedContainer:GetChildren()) do
            if child:IsA("TextButton") then
                totalButtonWidth = totalButtonWidth + child.AbsoluteSize.X + 8 -- padding
            end
        end
        UI.searchBox.Size = UDim2.new(1, -totalButtonWidth - 20, 1, -10) -- 20px buffer
    end)

    -- Scrolling List
    UI.petList = Instance.new("ScrollingFrame")
    UI.petList.Size = UDim2.new(1, -20, 1, -80)
    UI.petList.Position = UDim2.new(0, 10, 0, 70)
    UI.petList.BackgroundTransparency = 1
    UI.petList.BorderSizePixel = 0
    UI.petList.ScrollBarImageColor3 = Colors.accent
    UI.petList.ScrollBarThickness = 6
    UI.petList.Parent = UI.petsTab

    local listLayoutPets = Instance.new("UIListLayout")
    listLayoutPets.FillDirection = Enum.FillDirection.Vertical
    listLayoutPets.SortOrder = Enum.SortOrder.LayoutOrder
    listLayoutPets.Padding = UDim.new(0, 10)
    listLayoutPets.Parent = UI.petList

    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 5)
    padding.PaddingLeft = UDim.new(0, 5)
    padding.PaddingRight = UDim.new(0, 5)
    padding.Parent = UI.petList

    -- Start polling for pet data
    task.spawn(PetFinder.pollData)
    PetFinder.fetchData() -- Initial fetch
end

function UI.setupSettingsTab()
    UI.createLabel(UI.settingsTab, "Settings", UDim2.new(1, 0, 0, 50), UDim2.new(0, 0, 0, 20), 24, "title", {alignment = Enum.TextXAlignment.Center})
end

function UI.setupAnalyticsTab()
    UI.createLabel(UI.analyticsTab, "Analytics", UDim2.new(1, 0, 0, 50), UDim2.new(0, 0, 0, 20), 24, "title", {alignment = Enum.TextXAlignment.Center})
end

-- Start the GUI
UI.createMainInterface()

-- Note: Animation logging is completely removed.
-- This is now a Server Pet Finder with beautiful, responsive UI.
